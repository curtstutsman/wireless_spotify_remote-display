
final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001820  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800192c  0800192c  0001192c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080019a0  080019a0  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080019a0  080019a0  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080019a0  080019a0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080019a0  080019a0  000119a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080019a4  080019a4  000119a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080019a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001544  20000014  080019bc  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001558  080019bc  00021558  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a129  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bdc  00000000  00000000  0002a1a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 000048e6  00000000  00000000  0002bd85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000005d8  00000000  00000000  00030670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000838  00000000  00000000  00030c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00015f2b  00000000  00000000  00031480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000b5dd  00000000  00000000  000473ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0007e715  00000000  00000000  00052988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000ffc  00000000  00000000  000d10a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000046  00000000  00000000  000d209c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08001914 	.word	0x08001914

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08001914 	.word	0x08001914

0800014c <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Interrupt handler for both rotation and button press
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800014c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000150:	4604      	mov	r4, r0
    uint32_t currentTime = HAL_GetTick();
 8000152:	f000 fbb9 	bl	80008c8 <HAL_GetTick>

   // Handle rotary encoder rotation (connected to GPIO_PIN_0 and GPIO_PIN_1)
    if (GPIO_Pin == GPIO_PIN_0)  // Pins A and B of the encoder
 8000156:	2c01      	cmp	r4, #1
    uint32_t currentTime = HAL_GetTick();
 8000158:	4605      	mov	r5, r0
    if (GPIO_Pin == GPIO_PIN_0)  // Pins A and B of the encoder
 800015a:	d00d      	beq.n	8000178 <HAL_GPIO_EXTI_Callback+0x2c>
    	}

    }

    // Handle button press (connected to GPIO_PIN_2)
    if (GPIO_Pin == GPIO_PIN_4)  // Button press on the encoder
 800015c:	2c10      	cmp	r4, #16
 800015e:	d109      	bne.n	8000174 <HAL_GPIO_EXTI_Callback+0x28>
    {
		// Debounce the button press
		if ((currentTime - lastButtonPressTime) > debounceDelay)
 8000160:	4a1c      	ldr	r2, [pc, #112]	; (80001d4 <HAL_GPIO_EXTI_Callback+0x88>)
 8000162:	6813      	ldr	r3, [r2, #0]
 8000164:	1ac3      	subs	r3, r0, r3
 8000166:	2b64      	cmp	r3, #100	; 0x64
 8000168:	d904      	bls.n	8000174 <HAL_GPIO_EXTI_Callback+0x28>
		{
			// Register the button press and start counting taps
			tapCount++;
 800016a:	491b      	ldr	r1, [pc, #108]	; (80001d8 <HAL_GPIO_EXTI_Callback+0x8c>)

			// Update last button press time
			lastButtonPressTime = currentTime;
 800016c:	6010      	str	r0, [r2, #0]
			tapCount++;
 800016e:	780b      	ldrb	r3, [r1, #0]
 8000170:	3301      	adds	r3, #1
 8000172:	700b      	strb	r3, [r1, #0]
		}
   }
}
 8000174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    	if ((currentTime - lastRotationTime) > debounceDelay)
 8000178:	4e18      	ldr	r6, [pc, #96]	; (80001dc <HAL_GPIO_EXTI_Callback+0x90>)
 800017a:	6833      	ldr	r3, [r6, #0]
 800017c:	1ac3      	subs	r3, r0, r3
 800017e:	2b64      	cmp	r3, #100	; 0x64
 8000180:	d9f8      	bls.n	8000174 <HAL_GPIO_EXTI_Callback+0x28>
			uint8_t stateA = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);  // Encoder pin A
 8000182:	4621      	mov	r1, r4
 8000184:	4816      	ldr	r0, [pc, #88]	; (80001e0 <HAL_GPIO_EXTI_Callback+0x94>)
 8000186:	f000 fdab 	bl	8000ce0 <HAL_GPIO_ReadPin>
 800018a:	4604      	mov	r4, r0
			if (stateA != lastStateA){
 800018c:	4f15      	ldr	r7, [pc, #84]	; (80001e4 <HAL_GPIO_EXTI_Callback+0x98>)
			uint8_t stateB = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);  // Encoder pin B
 800018e:	2102      	movs	r1, #2
 8000190:	4813      	ldr	r0, [pc, #76]	; (80001e0 <HAL_GPIO_EXTI_Callback+0x94>)
 8000192:	f000 fda5 	bl	8000ce0 <HAL_GPIO_ReadPin>
			if (stateA != lastStateA){
 8000196:	783b      	ldrb	r3, [r7, #0]
 8000198:	42a3      	cmp	r3, r4
 800019a:	d018      	beq.n	80001ce <HAL_GPIO_EXTI_Callback+0x82>
				if (stateA != stateB) {
 800019c:	4284      	cmp	r4, r0
 800019e:	bf0c      	ite	eq
 80001a0:	f04f 33ff 	moveq.w	r3, #4294967295
 80001a4:	2301      	movne	r3, #1
 80001a6:	4a10      	ldr	r2, [pc, #64]	; (80001e8 <HAL_GPIO_EXTI_Callback+0x9c>)
 80001a8:	4910      	ldr	r1, [pc, #64]	; (80001ec <HAL_GPIO_EXTI_Callback+0xa0>)
 80001aa:	bf18      	it	ne
 80001ac:	4611      	movne	r1, r2
 80001ae:	f8df 8040 	ldr.w	r8, [pc, #64]	; 80001f0 <HAL_GPIO_EXTI_Callback+0xa4>
    }
    else{
    	return;
    }
	// Send 'command' to ESP32 via UART (hlpuart1)
	HAL_UART_Transmit(&huart1, (uint8_t*)command, strlen(command), HAL_MAX_DELAY);
 80001b2:	220c      	movs	r2, #12
 80001b4:	f888 3000 	strb.w	r3, [r8]
    	command = "raiseVolume\n";
 80001b8:	4b0e      	ldr	r3, [pc, #56]	; (80001f4 <HAL_GPIO_EXTI_Callback+0xa8>)
	HAL_UART_Transmit(&huart1, (uint8_t*)command, strlen(command), HAL_MAX_DELAY);
 80001ba:	480f      	ldr	r0, [pc, #60]	; (80001f8 <HAL_GPIO_EXTI_Callback+0xac>)
    	command = "raiseVolume\n";
 80001bc:	6019      	str	r1, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)command, strlen(command), HAL_MAX_DELAY);
 80001be:	f04f 33ff 	mov.w	r3, #4294967295
 80001c2:	f001 f8e3 	bl	800138c <HAL_UART_Transmit>
				encoderDirection = 0;
 80001c6:	2300      	movs	r3, #0
				lastRotationTime = currentTime;
 80001c8:	6035      	str	r5, [r6, #0]
				encoderDirection = 0;
 80001ca:	f888 3000 	strb.w	r3, [r8]
			lastStateA = stateA;
 80001ce:	703c      	strb	r4, [r7, #0]
}
 80001d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80001d4:	200011c4 	.word	0x200011c4
 80001d8:	20001550 	.word	0x20001550
 80001dc:	200011c8 	.word	0x200011c8
 80001e0:	40010800 	.word	0x40010800
 80001e4:	200011cc 	.word	0x200011cc
 80001e8:	0800192c 	.word	0x0800192c
 80001ec:	0800193c 	.word	0x0800193c
 80001f0:	20000130 	.word	0x20000130
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000134 	.word	0x20000134

080001fc <HAL_UART_RxCpltCallback>:
    if (huart->Instance == USART1)
 80001fc:	4b05      	ldr	r3, [pc, #20]	; (8000214 <HAL_UART_RxCpltCallback+0x18>)
 80001fe:	6802      	ldr	r2, [r0, #0]
 8000200:	429a      	cmp	r2, r3
 8000202:	d000      	beq.n	8000206 <HAL_UART_RxCpltCallback+0xa>
}
 8000204:	4770      	bx	lr
        HAL_UART_Receive_IT(&huart1, (uint8_t*)imageBuffer, IMAGE_DATA_SIZE);
 8000206:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <HAL_UART_RxCpltCallback+0x1c>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <HAL_UART_RxCpltCallback+0x20>)
 800020e:	f001 b92d 	b.w	800146c <HAL_UART_Receive_IT>
 8000212:	bf00      	nop
 8000214:	40013800 	.word	0x40013800
 8000218:	200001c4 	.word	0x200001c4
 800021c:	20000134 	.word	0x20000134

08000220 <init_buf>:
    // Store the pixel data
    imageBuffer[y][x] = pixelData;
}


void init_buf(){
 8000220:	b508      	push	{r3, lr}
    imageBuffer[y][x] = pixelData;
 8000222:	4b07      	ldr	r3, [pc, #28]	; (8000240 <init_buf+0x20>)
 8000224:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000228:	2138      	movs	r1, #56	; 0x38
 800022a:	4618      	mov	r0, r3
 800022c:	f001 fb46 	bl	80018bc <memset>
    for (int y = 32; y < IMAGE_SIZE; y++) {
        for (int x = 0; x < IMAGE_SIZE; x++) {
            setPixel(x, y, 0x00, 0x00, 0x00); // Black color
        }
    }
}
 8000230:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    imageBuffer[y][x] = pixelData;
 8000234:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000238:	2100      	movs	r1, #0
 800023a:	4410      	add	r0, r2
 800023c:	f001 bb3e 	b.w	80018bc <memset>
 8000240:	200001c4 	.word	0x200001c4

08000244 <initRowAddressValues>:


void initRowAddressValues(void) {
    for (int row = 0; row < 32; row++) {
 8000244:	2200      	movs	r2, #0
        uint32_t value = 0;

        // A line (PB7)
        if (row & 0x01) value |= (1 << 7);    // Set A
        else            value |= (1 << (7+16)); // Reset A
 8000246:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800024a:	4913      	ldr	r1, [pc, #76]	; (8000298 <initRowAddressValues+0x54>)
 800024c:	e005      	b.n	800025a <initRowAddressValues+0x16>
 800024e:	f012 0f01 	tst.w	r2, #1
 8000252:	bf14      	ite	ne
 8000254:	2380      	movne	r3, #128	; 0x80
 8000256:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000

        // B line (PB8)
        if (row & 0x02) value |= (1 << 8);
 800025a:	0790      	lsls	r0, r2, #30
 800025c:	bf4c      	ite	mi
 800025e:	f443 7380 	orrmi.w	r3, r3, #256	; 0x100
        else            value |= (1 << (8+16));
 8000262:	f043 7380 	orrpl.w	r3, r3, #16777216	; 0x1000000

        // C line (PB9)
        if (row & 0x04) value |= (1 << 9);
 8000266:	0750      	lsls	r0, r2, #29
 8000268:	bf4c      	ite	mi
 800026a:	f443 7300 	orrmi.w	r3, r3, #512	; 0x200
        else            value |= (1 << (9+16));
 800026e:	f043 7300 	orrpl.w	r3, r3, #33554432	; 0x2000000

        // D line (PB10)
        if (row & 0x08) value |= (1 << 10);
 8000272:	0710      	lsls	r0, r2, #28
 8000274:	bf4c      	ite	mi
 8000276:	f443 6380 	orrmi.w	r3, r3, #1024	; 0x400
        else            value |= (1 << (10+16));
 800027a:	f043 6380 	orrpl.w	r3, r3, #67108864	; 0x4000000

        // E line (PB6)
        if (row & 0x10) value |= (1 << 6);
 800027e:	06d0      	lsls	r0, r2, #27
    for (int row = 0; row < 32; row++) {
 8000280:	f102 0201 	add.w	r2, r2, #1
        if (row & 0x10) value |= (1 << 6);
 8000284:	bf4c      	ite	mi
 8000286:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
        else            value |= (1 << (6+16));
 800028a:	f443 0380 	orrpl.w	r3, r3, #4194304	; 0x400000
    for (int row = 0; row < 32; row++) {
 800028e:	2a20      	cmp	r2, #32

        rowAddressValues[row] = value;
 8000290:	f841 3f04 	str.w	r3, [r1, #4]!
    for (int row = 0; row < 32; row++) {
 8000294:	d1db      	bne.n	800024e <initRowAddressValues+0xa>
    }
}
 8000296:	4770      	bx	lr
 8000298:	200014cc 	.word	0x200014cc

0800029c <initBsrrLookupTable>:


void initBsrrLookupTable(void) {
    for (int i = 0; i < 64; i++) {
 800029c:	2300      	movs	r3, #0
void initBsrrLookupTable(void) {
 800029e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        int r1 = (i >> 0) & 1;
        int g1 = (i >> 1) & 1;
        int b1 = (i >> 2) & 1;
        int r2 = (i >> 3) & 1;
        int g2 = (i >> 4) & 1;
        int b2 = (i >> 5) & 1;
 80002a2:	469c      	mov	ip, r3

        // R1 = PB0
        bsrrValue |= r1 ? (1 << 0) : (1 << (0+16));
 80002a4:	f44f 3980 	mov.w	r9, #65536	; 0x10000
 80002a8:	f44f 2ac0 	mov.w	sl, #393216	; 0x60000
        int g2 = (i >> 4) & 1;
 80002ac:	461c      	mov	r4, r3
        int r2 = (i >> 3) & 1;
 80002ae:	469e      	mov	lr, r3
 80002b0:	4d1e      	ldr	r5, [pc, #120]	; (800032c <initBsrrLookupTable+0x90>)
        // G1 = PB1
        bsrrValue |= g1 ? (1 << 1) : (1 << (1+16));
 80002b2:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8000330 <initBsrrLookupTable+0x94>
 80002b6:	4f1f      	ldr	r7, [pc, #124]	; (8000334 <initBsrrLookupTable+0x98>)
 80002b8:	e012      	b.n	80002e0 <initBsrrLookupTable+0x44>
        bsrrValue |= r1 ? (1 << 0) : (1 << (0+16));
 80002ba:	f013 0f01 	tst.w	r3, #1
 80002be:	bf14      	ite	ne
 80002c0:	f04f 0901 	movne.w	r9, #1
 80002c4:	f44f 3980 	moveq.w	r9, #65536	; 0x10000
        bsrrValue |= g1 ? (1 << 1) : (1 << (1+16));
 80002c8:	2e00      	cmp	r6, #0
 80002ca:	bf15      	itete	ne
 80002cc:	463a      	movne	r2, r7
 80002ce:	f44f 22c0 	moveq.w	r2, #393216	; 0x60000
 80002d2:	f04f 0a06 	movne.w	sl, #6
 80002d6:	46c2      	moveq	sl, r8
        // B1 = PB2
        bsrrValue |= b1 ? (1 << 2) : (1 << (2+16));
 80002d8:	f013 0f04 	tst.w	r3, #4
 80002dc:	bf08      	it	eq
 80002de:	4692      	moveq	sl, r2
        // R2 = PB3
        bsrrValue |= r2 ? (1 << 3) : (1 << (3+16));
 80002e0:	f1be 0f00 	cmp.w	lr, #0
 80002e4:	bf14      	ite	ne
 80002e6:	2008      	movne	r0, #8
 80002e8:	f44f 2000 	moveq.w	r0, #524288	; 0x80000
        // G2 = PB4
        bsrrValue |= g2 ? (1 << 4) : (1 << (4+16));
 80002ec:	2c00      	cmp	r4, #0
 80002ee:	bf14      	ite	ne
 80002f0:	2110      	movne	r1, #16
 80002f2:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
        // B2 = PB5
        bsrrValue |= b2 ? (1 << 5) : (1 << (5+16));
 80002f6:	f1bc 0f00 	cmp.w	ip, #0
 80002fa:	bf0c      	ite	eq
 80002fc:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8000300:	2220      	movne	r2, #32
 8000302:	ea40 000a 	orr.w	r0, r0, sl
 8000306:	4301      	orrs	r1, r0
    for (int i = 0; i < 64; i++) {
 8000308:	3301      	adds	r3, #1
        bsrrValue |= b2 ? (1 << 5) : (1 << (5+16));
 800030a:	430a      	orrs	r2, r1
 800030c:	ea42 0209 	orr.w	r2, r2, r9
    for (int i = 0; i < 64; i++) {
 8000310:	2b40      	cmp	r3, #64	; 0x40
        int g1 = (i >> 1) & 1;
 8000312:	f3c3 0640 	ubfx	r6, r3, #1, #1
        int r2 = (i >> 3) & 1;
 8000316:	f3c3 0ec0 	ubfx	lr, r3, #3, #1
        int g2 = (i >> 4) & 1;
 800031a:	f3c3 1400 	ubfx	r4, r3, #4, #1
        int b2 = (i >> 5) & 1;
 800031e:	ea4f 1c63 	mov.w	ip, r3, asr #5

        bsrrLookupTable[i] = bsrrValue;
 8000322:	f845 2f04 	str.w	r2, [r5, #4]!
    for (int i = 0; i < 64; i++) {
 8000326:	d1c8      	bne.n	80002ba <initBsrrLookupTable+0x1e>
    }
}
 8000328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032c:	2000002c 	.word	0x2000002c
 8000330:	00020004 	.word	0x00020004
 8000334:	00040002 	.word	0x00040002

08000338 <initPixelLookupTable>:

void initPixelLookupTable() {
 8000338:	b570      	push	{r4, r5, r6, lr}
 800033a:	2402      	movs	r4, #2
    for (int pwmBit = 0; pwmBit < MAX_PWM_BITS; pwmBit++) {
        uint8_t bitMaskRed = 1 << (2 - pwmBit);
 800033c:	2601      	movs	r6, #1
 800033e:	4d14      	ldr	r5, [pc, #80]	; (8000390 <initPixelLookupTable+0x58>)
        uint8_t bitMaskGreen = 1 << (2 - pwmBit);
        uint8_t bitMaskBlue = 1 << (1 - pwmBit);  // Since Blue has only 2 bits
 8000340:	4628      	mov	r0, r5

        for (int pixelValue = 0; pixelValue < 256; pixelValue++) {
 8000342:	2200      	movs	r2, #0
        uint8_t bitMaskRed = 1 << (2 - pwmBit);
 8000344:	fa06 f104 	lsl.w	r1, r6, r4
 8000348:	3c01      	subs	r4, #1
        uint8_t bitMaskBlue = 1 << (1 - pwmBit);  // Since Blue has only 2 bits
 800034a:	fa06 fe04 	lsl.w	lr, r6, r4
        uint8_t bitMaskRed = 1 << (2 - pwmBit);
 800034e:	b2c9      	uxtb	r1, r1
        uint8_t bitMaskBlue = 1 << (1 - pwmBit);  // Since Blue has only 2 bits
 8000350:	fa5f fe8e 	uxtb.w	lr, lr
            uint8_t r = pixelValue & 0x07;         // 3 bits for Red
            uint8_t g = (pixelValue >> 3) & 0x07;  // 3 bits for Green
            uint8_t b = (pixelValue >> 6) & 0x03;  // 2 bits for Blue

            uint8_t r_on = (r & bitMaskRed) ? 1 : 0;
            uint8_t g_on = (g & bitMaskGreen) ? 1 : 0;
 8000354:	ea11 03e2 	ands.w	r3, r1, r2, asr #3
 8000358:	bf14      	ite	ne
 800035a:	f04f 0c01 	movne.w	ip, #1
 800035e:	f04f 0c00 	moveq.w	ip, #0
            uint8_t b_on = (b & bitMaskBlue) ? 1 : 0;
 8000362:	ea1e 13a2 	ands.w	r3, lr, r2, asr #6
 8000366:	bf14      	ite	ne
 8000368:	2301      	movne	r3, #1
 800036a:	2300      	moveq	r3, #0

            uint8_t pixelBits = (r_on << 0) | (g_on << 1) | (b_on << 2);
 800036c:	009b      	lsls	r3, r3, #2
            uint8_t r_on = (r & bitMaskRed) ? 1 : 0;
 800036e:	4211      	tst	r1, r2
            uint8_t pixelBits = (r_on << 0) | (g_on << 1) | (b_on << 2);
 8000370:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
 8000374:	bf18      	it	ne
 8000376:	f043 0301 	orrne.w	r3, r3, #1
        for (int pixelValue = 0; pixelValue < 256; pixelValue++) {
 800037a:	3201      	adds	r2, #1
 800037c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100

            pixelLookupTable[pwmBit][pixelValue] = pixelBits;
 8000380:	f800 3f01 	strb.w	r3, [r0, #1]!
        for (int pixelValue = 0; pixelValue < 256; pixelValue++) {
 8000384:	d1e6      	bne.n	8000354 <initPixelLookupTable+0x1c>
    for (int pwmBit = 0; pwmBit < MAX_PWM_BITS; pwmBit++) {
 8000386:	1c63      	adds	r3, r4, #1
 8000388:	f505 7580 	add.w	r5, r5, #256	; 0x100
 800038c:	d1d8      	bne.n	8000340 <initPixelLookupTable+0x8>
        }
    }
}
 800038e:	bd70      	pop	{r4, r5, r6, pc}
 8000390:	200011cf 	.word	0x200011cf

08000394 <updateDisplay>:

void updateDisplay(void) {
 8000394:	2302      	movs	r3, #2
 8000396:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

                // Set pixel colors using lookup table
                GPIOB->BSRR = bsrrLookupTable[pixelBits];

                // Toggle Clock (CLK = PB11)
                GPIOB->BSRR = (1 << 11);        // Set CLK high
 800039a:	f44f 6600 	mov.w	r6, #2048	; 0x800
                GPIOB->BSRR = (1 << (11+16));   // Set CLK low
 800039e:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
            }

            // Latch Data (LAT = PB12)
            GPIOB->BSRR = (1 << 12);         // LAT high
 80003a2:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
void updateDisplay(void) {
 80003a6:	b085      	sub	sp, #20
 80003a8:	f8df c098 	ldr.w	ip, [pc, #152]	; 8000444 <updateDisplay+0xb0>
 80003ac:	f8df b098 	ldr.w	fp, [pc, #152]	; 8000448 <updateDisplay+0xb4>
 80003b0:	4f26      	ldr	r7, [pc, #152]	; (800044c <updateDisplay+0xb8>)
            GPIOB->BSRR = rowAddressValues[row];
 80003b2:	4a27      	ldr	r2, [pc, #156]	; (8000450 <updateDisplay+0xbc>)
void updateDisplay(void) {
 80003b4:	9301      	str	r3, [sp, #4]
        int delay = baseDelay << (maxPwmBits - 1 - pwmBit);
 80003b6:	4b27      	ldr	r3, [pc, #156]	; (8000454 <updateDisplay+0xc0>)
 80003b8:	9901      	ldr	r1, [sp, #4]
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8000458 <updateDisplay+0xc4>
 80003c0:	f8df e098 	ldr.w	lr, [pc, #152]	; 800045c <updateDisplay+0xc8>
 80003c4:	fa03 f801 	lsl.w	r8, r3, r1
            GPIOB->BSRR = rowAddressValues[row];
 80003c8:	f859 3f04 	ldr.w	r3, [r9, #4]!
 80003cc:	f1ae 0140 	sub.w	r1, lr, #64	; 0x40
 80003d0:	6113      	str	r3, [r2, #16]
            for (int col = 0; col < 64; col++) {
 80003d2:	f50e 60f8 	add.w	r0, lr, #1984	; 0x7c0
                uint8_t pixelBits2 = lookupTable[pixel2];
 80003d6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
                uint8_t pixelBits = pixelBits1 | (pixelBits2 << 3);
 80003da:	f81c 4003 	ldrb.w	r4, [ip, r3]
                uint8_t pixelBits1 = lookupTable[pixel1];
 80003de:	f811 3f01 	ldrb.w	r3, [r1, #1]!
                uint8_t pixelBits = pixelBits1 | (pixelBits2 << 3);
 80003e2:	f81c 3003 	ldrb.w	r3, [ip, r3]
            for (int col = 0; col < 64; col++) {
 80003e6:	458e      	cmp	lr, r1
                uint8_t pixelBits = pixelBits1 | (pixelBits2 << 3);
 80003e8:	ea43 03c4 	orr.w	r3, r3, r4, lsl #3
                GPIOB->BSRR = bsrrLookupTable[pixelBits];
 80003ec:	b2db      	uxtb	r3, r3
 80003ee:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80003f2:	6113      	str	r3, [r2, #16]
                GPIOB->BSRR = (1 << 11);        // Set CLK high
 80003f4:	6116      	str	r6, [r2, #16]
                GPIOB->BSRR = (1 << (11+16));   // Set CLK low
 80003f6:	6115      	str	r5, [r2, #16]
            for (int col = 0; col < 64; col++) {
 80003f8:	d1ed      	bne.n	80003d6 <updateDisplay+0x42>
            GPIOB->BSRR = (1 << (12+16));    // LAT low
 80003fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            GPIOB->BSRR = (1 << 12);         // LAT high
 80003fe:	f8c2 a010 	str.w	sl, [r2, #16]
            GPIOB->BSRR = (1 << (12+16));    // LAT low
 8000402:	6113      	str	r3, [r2, #16]

            // Enable Display (OE = PB13 active low)
            GPIOB->BSRR = (1 << (13+16));    // OE low (output enabled)
 8000404:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000408:	6113      	str	r3, [r2, #16]

            // Delay proportional to the bit weight
            for (volatile int i = 0; i < delay; i++) {
 800040a:	2300      	movs	r3, #0
 800040c:	9303      	str	r3, [sp, #12]
 800040e:	9b03      	ldr	r3, [sp, #12]
 8000410:	4598      	cmp	r8, r3
 8000412:	dd06      	ble.n	8000422 <updateDisplay+0x8e>
                __NOP();
 8000414:	bf00      	nop
            for (volatile int i = 0; i < delay; i++) {
 8000416:	9b03      	ldr	r3, [sp, #12]
 8000418:	3301      	adds	r3, #1
 800041a:	9303      	str	r3, [sp, #12]
 800041c:	9b03      	ldr	r3, [sp, #12]
 800041e:	4543      	cmp	r3, r8
 8000420:	dbf8      	blt.n	8000414 <updateDisplay+0x80>
            }

            // Disable Display (OE = PB13)
            GPIOB->BSRR = (1 << 13);         // OE high (output disabled)
 8000422:	f44f 5300 	mov.w	r3, #8192	; 0x2000
        for (int row = 0; row < 32; row++) {
 8000426:	45cb      	cmp	fp, r9
            GPIOB->BSRR = (1 << 13);         // OE high (output disabled)
 8000428:	6113      	str	r3, [r2, #16]
        for (int row = 0; row < 32; row++) {
 800042a:	f10e 0e40 	add.w	lr, lr, #64	; 0x40
 800042e:	d1cb      	bne.n	80003c8 <updateDisplay+0x34>
    for (int pwmBit = 0; pwmBit < maxPwmBits; pwmBit++) {
 8000430:	9b01      	ldr	r3, [sp, #4]
 8000432:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
 8000436:	3b01      	subs	r3, #1
 8000438:	9301      	str	r3, [sp, #4]
 800043a:	3301      	adds	r3, #1
 800043c:	d1bb      	bne.n	80003b6 <updateDisplay+0x22>
        }
    }
}
 800043e:	b005      	add	sp, #20
 8000440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000444:	200011d0 	.word	0x200011d0
 8000448:	2000154c 	.word	0x2000154c
 800044c:	20000030 	.word	0x20000030
 8000450:	40010c00 	.word	0x40010c00
 8000454:	20000000 	.word	0x20000000
 8000458:	200014cc 	.word	0x200014cc
 800045c:	20000203 	.word	0x20000203

08000460 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000464:	2220      	movs	r2, #32
 8000466:	2100      	movs	r1, #0
 8000468:	a807      	add	r0, sp, #28
 800046a:	f001 fa27 	bl	80018bc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800046e:	2001      	movs	r0, #1
 8000470:	2110      	movs	r1, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000472:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000474:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000476:	f44f 1260 	mov.w	r2, #3670016	; 0x380000
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800047a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800047e:	a806      	add	r0, sp, #24
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000480:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000484:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8000488:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800048a:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800048c:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800048e:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000490:	f000 fc3c 	bl	8000d0c <HAL_RCC_OscConfig>
 8000494:	b108      	cbz	r0, 800049a <SystemClock_Config+0x3a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000496:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000498:	e7fe      	b.n	8000498 <SystemClock_Config+0x38>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800049a:	4603      	mov	r3, r0
 800049c:	250f      	movs	r5, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800049e:	f44f 6280 	mov.w	r2, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004a2:	4621      	mov	r1, r4
 80004a4:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004a6:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004a8:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004aa:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ac:	9501      	str	r5, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004ae:	9204      	str	r2, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004b0:	f000 fe1c 	bl	80010ec <HAL_RCC_ClockConfig>
 80004b4:	b108      	cbz	r0, 80004ba <SystemClock_Config+0x5a>
 80004b6:	b672      	cpsid	i
  while (1)
 80004b8:	e7fe      	b.n	80004b8 <SystemClock_Config+0x58>
}
 80004ba:	b011      	add	sp, #68	; 0x44
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	bf00      	nop

080004c0 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c0:	2400      	movs	r4, #0
{
 80004c2:	b580      	push	{r7, lr}
 80004c4:	b086      	sub	sp, #24
  HAL_Init();
 80004c6:	f000 f9e1 	bl	800088c <HAL_Init>
  SystemClock_Config();
 80004ca:	f7ff ffc9 	bl	8000460 <SystemClock_Config>
  HAL_Delay(500);
 80004ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004d2:	f000 f9ff 	bl	80008d4 <HAL_Delay>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d6:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80004da:	e9cd 4404 	strd	r4, r4, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004de:	4b5a      	ldr	r3, [pc, #360]	; (8000648 <main+0x188>)
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80004e0:	f643 71ff 	movw	r1, #16383	; 0x3fff
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e4:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80004e6:	4859      	ldr	r0, [pc, #356]	; (800064c <main+0x18c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e8:	f042 0204 	orr.w	r2, r2, #4
 80004ec:	619a      	str	r2, [r3, #24]
 80004ee:	699a      	ldr	r2, [r3, #24]
  huart2.Init.BaudRate = 115200;
 80004f0:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f4:	f002 0204 	and.w	r2, r2, #4
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004fc:	699a      	ldr	r2, [r3, #24]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004fe:	250c      	movs	r5, #12
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000500:	f042 0208 	orr.w	r2, r2, #8
 8000504:	619a      	str	r2, [r3, #24]
 8000506:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000508:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800050a:	f003 0308 	and.w	r3, r3, #8
 800050e:	9301      	str	r3, [sp, #4]
 8000510:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000512:	f000 fbeb 	bl	8000cec <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8000516:	2213      	movs	r2, #19
 8000518:	4b4d      	ldr	r3, [pc, #308]	; (8000650 <main+0x190>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800051a:	484e      	ldr	r0, [pc, #312]	; (8000654 <main+0x194>)
 800051c:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 800051e:	e9cd 2302 	strd	r2, r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000522:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000524:	f000 face 	bl	8000ac4 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000528:	2201      	movs	r2, #1
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800052a:	f643 73ff 	movw	r3, #16383	; 0x3fff
 800052e:	e9cd 3202 	strd	r3, r2, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000532:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000534:	4845      	ldr	r0, [pc, #276]	; (800064c <main+0x18c>)
 8000536:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000538:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053a:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800053c:	f000 fac2 	bl	8000ac4 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000540:	4622      	mov	r2, r4
 8000542:	4621      	mov	r1, r4
 8000544:	2006      	movs	r0, #6
 8000546:	f000 f9e9 	bl	800091c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800054a:	2006      	movs	r0, #6
 800054c:	f000 fa24 	bl	8000998 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000550:	4622      	mov	r2, r4
 8000552:	4621      	mov	r1, r4
 8000554:	2007      	movs	r0, #7
 8000556:	f000 f9e1 	bl	800091c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800055a:	2007      	movs	r0, #7
 800055c:	f000 fa1c 	bl	8000998 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000560:	4622      	mov	r2, r4
 8000562:	4621      	mov	r1, r4
 8000564:	200a      	movs	r0, #10
 8000566:	f000 f9d9 	bl	800091c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800056a:	200a      	movs	r0, #10
 800056c:	f000 fa14 	bl	8000998 <HAL_NVIC_EnableIRQ>
  huart2.Instance = USART2;
 8000570:	4839      	ldr	r0, [pc, #228]	; (8000658 <main+0x198>)
 8000572:	4b3a      	ldr	r3, [pc, #232]	; (800065c <main+0x19c>)
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000574:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Instance = USART2;
 8000578:	e9c0 3700 	strd	r3, r7, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800057c:	e9c0 4504 	strd	r4, r5, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000580:	e9c0 4406 	strd	r4, r4, [r0, #24]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000584:	f000 fe94 	bl	80012b0 <HAL_UART_Init>
 8000588:	b108      	cbz	r0, 800058e <main+0xce>
 800058a:	b672      	cpsid	i
  while (1)
 800058c:	e7fe      	b.n	800058c <main+0xcc>
  huart1.Instance = USART1;
 800058e:	4603      	mov	r3, r0
 8000590:	4e33      	ldr	r6, [pc, #204]	; (8000660 <main+0x1a0>)
 8000592:	4a34      	ldr	r2, [pc, #208]	; (8000664 <main+0x1a4>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000594:	4630      	mov	r0, r6
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000596:	e9c6 3302 	strd	r3, r3, [r6, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800059a:	e9c6 3504 	strd	r3, r5, [r6, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800059e:	e9c6 3306 	strd	r3, r3, [r6, #24]
  huart1.Init.BaudRate = 115200;
 80005a2:	6077      	str	r7, [r6, #4]
  huart1.Instance = USART1;
 80005a4:	6032      	str	r2, [r6, #0]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005a6:	f000 fe83 	bl	80012b0 <HAL_UART_Init>
 80005aa:	b108      	cbz	r0, 80005b0 <main+0xf0>
 80005ac:	b672      	cpsid	i
  while (1)
 80005ae:	e7fe      	b.n	80005ae <main+0xee>
  HAL_UART_Receive_IT(&huart1, (uint8_t*)imageBuffer, IMAGE_DATA_SIZE);
 80005b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80005b4:	492c      	ldr	r1, [pc, #176]	; (8000668 <main+0x1a8>)
 80005b6:	4630      	mov	r0, r6
 80005b8:	f000 ff58 	bl	800146c <HAL_UART_Receive_IT>
  init_buf();
 80005bc:	f7ff fe30 	bl	8000220 <init_buf>
  initRowAddressValues();
 80005c0:	f7ff fe40 	bl	8000244 <initRowAddressValues>
  initBsrrLookupTable();
 80005c4:	f7ff fe6a 	bl	800029c <initBsrrLookupTable>
  initPixelLookupTable();
 80005c8:	f7ff feb6 	bl	8000338 <initPixelLookupTable>
 80005cc:	4c27      	ldr	r4, [pc, #156]	; (800066c <main+0x1ac>)
 80005ce:	4d28      	ldr	r5, [pc, #160]	; (8000670 <main+0x1b0>)
 80005d0:	4f28      	ldr	r7, [pc, #160]	; (8000674 <main+0x1b4>)
 80005d2:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 8000678 <main+0x1b8>
 80005d6:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800067c <main+0x1bc>
 80005da:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8000680 <main+0x1c0>
      updateDisplay();
 80005de:	f7ff fed9 	bl	8000394 <updateDisplay>
      if ((tapCount > 0) && (HAL_GetTick() - lastButtonPressTime) > tapTimeout)
 80005e2:	7823      	ldrb	r3, [r4, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d0fa      	beq.n	80005de <main+0x11e>
 80005e8:	f000 f96e 	bl	80008c8 <HAL_GetTick>
 80005ec:	682b      	ldr	r3, [r5, #0]
 80005ee:	1ac0      	subs	r0, r0, r3
 80005f0:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 80005f4:	d9f3      	bls.n	80005de <main+0x11e>
	if (tapCount == 1){
 80005f6:	7823      	ldrb	r3, [r4, #0]
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d006      	beq.n	800060a <main+0x14a>
	else if (tapCount == 2){
 80005fc:	2b02      	cmp	r3, #2
 80005fe:	d00e      	beq.n	800061e <main+0x15e>
	else if (tapCount == 3){
 8000600:	2b03      	cmp	r3, #3
 8000602:	d016      	beq.n	8000632 <main+0x172>
          tapCount = 0;
 8000604:	2300      	movs	r3, #0
 8000606:	7023      	strb	r3, [r4, #0]
 8000608:	e7e9      	b.n	80005de <main+0x11e>
	HAL_UART_Transmit(&huart1, (uint8_t*)command, strlen(command), HAL_MAX_DELAY);
 800060a:	f04f 33ff 	mov.w	r3, #4294967295
 800060e:	220b      	movs	r2, #11
 8000610:	4630      	mov	r0, r6
 8000612:	4919      	ldr	r1, [pc, #100]	; (8000678 <main+0x1b8>)
	command = "togglePlay\n";
 8000614:	f8c7 a000 	str.w	sl, [r7]
	HAL_UART_Transmit(&huart1, (uint8_t*)command, strlen(command), HAL_MAX_DELAY);
 8000618:	f000 feb8 	bl	800138c <HAL_UART_Transmit>
}
 800061c:	e7f2      	b.n	8000604 <main+0x144>
	(HAL_UART_Transmit(&huart1, (uint8_t*)command, strlen(command), HAL_MAX_DELAY) != HAL_OK);
 800061e:	f04f 33ff 	mov.w	r3, #4294967295
 8000622:	2209      	movs	r2, #9
 8000624:	4641      	mov	r1, r8
 8000626:	4630      	mov	r0, r6
	command = "nextSong\n";
 8000628:	f8c7 8000 	str.w	r8, [r7]
	(HAL_UART_Transmit(&huart1, (uint8_t*)command, strlen(command), HAL_MAX_DELAY) != HAL_OK);
 800062c:	f000 feae 	bl	800138c <HAL_UART_Transmit>
}
 8000630:	e7e8      	b.n	8000604 <main+0x144>
	(HAL_UART_Transmit(&huart1, (uint8_t*)command, strlen(command), HAL_MAX_DELAY) != HAL_OK);
 8000632:	f04f 33ff 	mov.w	r3, #4294967295
 8000636:	220d      	movs	r2, #13
 8000638:	4649      	mov	r1, r9
 800063a:	4630      	mov	r0, r6
	command = "previousSong\n";
 800063c:	f8c7 9000 	str.w	r9, [r7]
	(HAL_UART_Transmit(&huart1, (uint8_t*)command, strlen(command), HAL_MAX_DELAY) != HAL_OK);
 8000640:	f000 fea4 	bl	800138c <HAL_UART_Transmit>
}
 8000644:	e7de      	b.n	8000604 <main+0x144>
 8000646:	bf00      	nop
 8000648:	40021000 	.word	0x40021000
 800064c:	40010c00 	.word	0x40010c00
 8000650:	10110000 	.word	0x10110000
 8000654:	40010800 	.word	0x40010800
 8000658:	2000017c 	.word	0x2000017c
 800065c:	40004400 	.word	0x40004400
 8000660:	20000134 	.word	0x20000134
 8000664:	40013800 	.word	0x40013800
 8000668:	200001c4 	.word	0x200001c4
 800066c:	20001550 	.word	0x20001550
 8000670:	200011c4 	.word	0x200011c4
 8000674:	20000004 	.word	0x20000004
 8000678:	0800194c 	.word	0x0800194c
 800067c:	08001958 	.word	0x08001958
 8000680:	08001964 	.word	0x08001964

08000684 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000684:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <HAL_MspInit+0x3c>)
{
 8000686:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000688:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800068a:	490e      	ldr	r1, [pc, #56]	; (80006c4 <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 800068c:	f042 0201 	orr.w	r2, r2, #1
 8000690:	619a      	str	r2, [r3, #24]
 8000692:	699a      	ldr	r2, [r3, #24]
 8000694:	f002 0201 	and.w	r2, r2, #1
 8000698:	9200      	str	r2, [sp, #0]
 800069a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800069c:	69da      	ldr	r2, [r3, #28]
 800069e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80006a2:	61da      	str	r2, [r3, #28]
 80006a4:	69db      	ldr	r3, [r3, #28]
 80006a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006aa:	9301      	str	r3, [sp, #4]
 80006ac:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80006ae:	684b      	ldr	r3, [r1, #4]
 80006b0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80006b8:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ba:	b002      	add	sp, #8
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	40021000 	.word	0x40021000
 80006c4:	40010000 	.word	0x40010000

080006c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006c8:	b5d0      	push	{r4, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ca:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 80006cc:	4a33      	ldr	r2, [pc, #204]	; (800079c <HAL_UART_MspInit+0xd4>)
 80006ce:	6803      	ldr	r3, [r0, #0]
{
 80006d0:	b088      	sub	sp, #32
  if(huart->Instance==USART1)
 80006d2:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d4:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80006d8:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(huart->Instance==USART1)
 80006dc:	d004      	beq.n	80006e8 <HAL_UART_MspInit+0x20>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 80006de:	4a30      	ldr	r2, [pc, #192]	; (80007a0 <HAL_UART_MspInit+0xd8>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d033      	beq.n	800074c <HAL_UART_MspInit+0x84>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006e4:	b008      	add	sp, #32
 80006e6:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80006e8:	4b2e      	ldr	r3, [pc, #184]	; (80007a4 <HAL_UART_MspInit+0xdc>)
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006ea:	f44f 7600 	mov.w	r6, #512	; 0x200
    __HAL_RCC_USART1_CLK_ENABLE();
 80006ee:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006f0:	2702      	movs	r7, #2
    __HAL_RCC_USART1_CLK_ENABLE();
 80006f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80006f6:	619a      	str	r2, [r3, #24]
 80006f8:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fa:	a904      	add	r1, sp, #16
    __HAL_RCC_USART1_CLK_ENABLE();
 80006fc:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000700:	9200      	str	r2, [sp, #0]
 8000702:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000704:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000706:	4828      	ldr	r0, [pc, #160]	; (80007a8 <HAL_UART_MspInit+0xe0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000708:	f042 0204 	orr.w	r2, r2, #4
 800070c:	619a      	str	r2, [r3, #24]
 800070e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000710:	e9cd 6704 	strd	r6, r7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000714:	f003 0304 	and.w	r3, r3, #4
 8000718:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800071a:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800071c:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800071e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000720:	f000 f9d0 	bl	8000ac4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000724:	2300      	movs	r3, #0
 8000726:	f44f 6280 	mov.w	r2, #1024	; 0x400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072a:	a904      	add	r1, sp, #16
 800072c:	481e      	ldr	r0, [pc, #120]	; (80007a8 <HAL_UART_MspInit+0xe0>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800072e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000734:	f000 f9c6 	bl	8000ac4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000738:	4622      	mov	r2, r4
 800073a:	4621      	mov	r1, r4
 800073c:	2025      	movs	r0, #37	; 0x25
 800073e:	f000 f8ed 	bl	800091c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000742:	2025      	movs	r0, #37	; 0x25
 8000744:	f000 f928 	bl	8000998 <HAL_NVIC_EnableIRQ>
}
 8000748:	b008      	add	sp, #32
 800074a:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 800074c:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <HAL_UART_MspInit+0xdc>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800074e:	2604      	movs	r6, #4
    __HAL_RCC_USART2_CLK_ENABLE();
 8000750:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000752:	2702      	movs	r7, #2
    __HAL_RCC_USART2_CLK_ENABLE();
 8000754:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000758:	61da      	str	r2, [r3, #28]
 800075a:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075c:	a904      	add	r1, sp, #16
    __HAL_RCC_USART2_CLK_ENABLE();
 800075e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000762:	9202      	str	r2, [sp, #8]
 8000764:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000768:	480f      	ldr	r0, [pc, #60]	; (80007a8 <HAL_UART_MspInit+0xe0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	f042 0204 	orr.w	r2, r2, #4
 800076e:	619a      	str	r2, [r3, #24]
 8000770:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000772:	e9cd 6704 	strd	r6, r7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	f003 0304 	and.w	r3, r3, #4
 800077a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800077c:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	9a03      	ldr	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000780:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000782:	f000 f99f 	bl	8000ac4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000786:	2208      	movs	r2, #8
 8000788:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078a:	4807      	ldr	r0, [pc, #28]	; (80007a8 <HAL_UART_MspInit+0xe0>)
 800078c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800078e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000794:	f000 f996 	bl	8000ac4 <HAL_GPIO_Init>
}
 8000798:	b008      	add	sp, #32
 800079a:	bdd0      	pop	{r4, r6, r7, pc}
 800079c:	40013800 	.word	0x40013800
 80007a0:	40004400 	.word	0x40004400
 80007a4:	40021000 	.word	0x40021000
 80007a8:	40010800 	.word	0x40010800

080007ac <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007ac:	e7fe      	b.n	80007ac <NMI_Handler>
 80007ae:	bf00      	nop

080007b0 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <HardFault_Handler>
 80007b2:	bf00      	nop

080007b4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <MemManage_Handler>
 80007b6:	bf00      	nop

080007b8 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <BusFault_Handler>
 80007ba:	bf00      	nop

080007bc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007bc:	e7fe      	b.n	80007bc <UsageFault_Handler>
 80007be:	bf00      	nop

080007c0 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop

080007c4 <DebugMon_Handler>:
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop

080007c8 <PendSV_Handler>:
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop

080007cc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007cc:	f000 b870 	b.w	80008b0 <HAL_IncTick>

080007d0 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80007d0:	2001      	movs	r0, #1
 80007d2:	f000 ba8f 	b.w	8000cf4 <HAL_GPIO_EXTI_IRQHandler>
 80007d6:	bf00      	nop

080007d8 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80007d8:	2002      	movs	r0, #2
 80007da:	f000 ba8b 	b.w	8000cf4 <HAL_GPIO_EXTI_IRQHandler>
 80007de:	bf00      	nop

080007e0 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80007e0:	2010      	movs	r0, #16
 80007e2:	f000 ba87 	b.w	8000cf4 <HAL_GPIO_EXTI_IRQHandler>
 80007e6:	bf00      	nop

080007e8 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80007e8:	4801      	ldr	r0, [pc, #4]	; (80007f0 <USART1_IRQHandler+0x8>)
 80007ea:	f000 bed9 	b.w	80015a0 <HAL_UART_IRQHandler>
 80007ee:	bf00      	nop
 80007f0:	20000134 	.word	0x20000134

080007f4 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop

080007f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007f8:	f7ff fffc 	bl	80007f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007fc:	480b      	ldr	r0, [pc, #44]	; (800082c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007fe:	490c      	ldr	r1, [pc, #48]	; (8000830 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000800:	4a0c      	ldr	r2, [pc, #48]	; (8000834 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000804:	e002      	b.n	800080c <LoopCopyDataInit>

08000806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800080a:	3304      	adds	r3, #4

0800080c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800080c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800080e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000810:	d3f9      	bcc.n	8000806 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000812:	4a09      	ldr	r2, [pc, #36]	; (8000838 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000814:	4c09      	ldr	r4, [pc, #36]	; (800083c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000818:	e001      	b.n	800081e <LoopFillZerobss>

0800081a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800081a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800081c:	3204      	adds	r2, #4

0800081e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800081e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000820:	d3fb      	bcc.n	800081a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000822:	f001 f853 	bl	80018cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000826:	f7ff fe4b 	bl	80004c0 <main>
  bx lr
 800082a:	4770      	bx	lr
  ldr r0, =_sdata
 800082c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000830:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000834:	080019a8 	.word	0x080019a8
  ldr r2, =_sbss
 8000838:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800083c:	20001558 	.word	0x20001558

08000840 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000840:	e7fe      	b.n	8000840 <ADC1_2_IRQHandler>
	...

08000844 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000844:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000846:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800084a:	4a0d      	ldr	r2, [pc, #52]	; (8000880 <HAL_InitTick+0x3c>)
{
 800084c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800084e:	7811      	ldrb	r1, [r2, #0]
 8000850:	4a0c      	ldr	r2, [pc, #48]	; (8000884 <HAL_InitTick+0x40>)
 8000852:	fbb3 f3f1 	udiv	r3, r3, r1
 8000856:	6812      	ldr	r2, [r2, #0]
 8000858:	fbb2 f0f3 	udiv	r0, r2, r3
 800085c:	f000 f8aa 	bl	80009b4 <HAL_SYSTICK_Config>
 8000860:	b908      	cbnz	r0, 8000866 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000862:	2d0f      	cmp	r5, #15
 8000864:	d901      	bls.n	800086a <HAL_InitTick+0x26>
    return HAL_ERROR;
 8000866:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000868:	bd38      	pop	{r3, r4, r5, pc}
 800086a:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800086c:	4602      	mov	r2, r0
 800086e:	4629      	mov	r1, r5
 8000870:	f04f 30ff 	mov.w	r0, #4294967295
 8000874:	f000 f852 	bl	800091c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000878:	4b03      	ldr	r3, [pc, #12]	; (8000888 <HAL_InitTick+0x44>)
 800087a:	4620      	mov	r0, r4
 800087c:	601d      	str	r5, [r3, #0]
}
 800087e:	bd38      	pop	{r3, r4, r5, pc}
 8000880:	2000000c 	.word	0x2000000c
 8000884:	20000008 	.word	0x20000008
 8000888:	20000010 	.word	0x20000010

0800088c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800088c:	4a07      	ldr	r2, [pc, #28]	; (80008ac <HAL_Init+0x20>)
{
 800088e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000890:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000892:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000894:	f043 0310 	orr.w	r3, r3, #16
 8000898:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800089a:	f000 f82d 	bl	80008f8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800089e:	200f      	movs	r0, #15
 80008a0:	f7ff ffd0 	bl	8000844 <HAL_InitTick>
  HAL_MspInit();
 80008a4:	f7ff feee 	bl	8000684 <HAL_MspInit>
}
 80008a8:	2000      	movs	r0, #0
 80008aa:	bd08      	pop	{r3, pc}
 80008ac:	40022000 	.word	0x40022000

080008b0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80008b0:	4a03      	ldr	r2, [pc, #12]	; (80008c0 <HAL_IncTick+0x10>)
 80008b2:	4b04      	ldr	r3, [pc, #16]	; (80008c4 <HAL_IncTick+0x14>)
 80008b4:	6811      	ldr	r1, [r2, #0]
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	440b      	add	r3, r1
 80008ba:	6013      	str	r3, [r2, #0]
}
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	20001554 	.word	0x20001554
 80008c4:	2000000c 	.word	0x2000000c

080008c8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80008c8:	4b01      	ldr	r3, [pc, #4]	; (80008d0 <HAL_GetTick+0x8>)
 80008ca:	6818      	ldr	r0, [r3, #0]
}
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	20001554 	.word	0x20001554

080008d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008d4:	b538      	push	{r3, r4, r5, lr}
 80008d6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80008d8:	f7ff fff6 	bl	80008c8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008dc:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80008de:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80008e0:	d002      	beq.n	80008e8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80008e2:	4b04      	ldr	r3, [pc, #16]	; (80008f4 <HAL_Delay+0x20>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008e8:	f7ff ffee 	bl	80008c8 <HAL_GetTick>
 80008ec:	1b40      	subs	r0, r0, r5
 80008ee:	42a0      	cmp	r0, r4
 80008f0:	d3fa      	bcc.n	80008e8 <HAL_Delay+0x14>
  {
  }
}
 80008f2:	bd38      	pop	{r3, r4, r5, pc}
 80008f4:	2000000c 	.word	0x2000000c

080008f8 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008f8:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008fc:	4906      	ldr	r1, [pc, #24]	; (8000918 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008fe:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000900:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000902:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000906:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800090a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800090c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000910:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000914:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000916:	4770      	bx	lr
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800091c:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <HAL_NVIC_SetPriority+0x74>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800091e:	b500      	push	{lr}
 8000920:	68db      	ldr	r3, [r3, #12]
 8000922:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000926:	f1c3 0e07 	rsb	lr, r3, #7
 800092a:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800092e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000932:	bf28      	it	cs
 8000934:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000938:	f1bc 0f06 	cmp.w	ip, #6
 800093c:	d91b      	bls.n	8000976 <HAL_NVIC_SetPriority+0x5a>

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800093e:	f04f 3cff 	mov.w	ip, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000942:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000944:	fa0c fc03 	lsl.w	ip, ip, r3
 8000948:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800094c:	f04f 3cff 	mov.w	ip, #4294967295
 8000950:	fa0c fc0e 	lsl.w	ip, ip, lr
 8000954:	ea21 010c 	bic.w	r1, r1, ip
 8000958:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800095a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800095c:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8000960:	db0c      	blt.n	800097c <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000962:	0109      	lsls	r1, r1, #4
 8000964:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000968:	b2c9      	uxtb	r1, r1
 800096a:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800096e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000972:	f85d fb04 	ldr.w	pc, [sp], #4
 8000976:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000978:	4613      	mov	r3, r2
 800097a:	e7e7      	b.n	800094c <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800097c:	4b05      	ldr	r3, [pc, #20]	; (8000994 <HAL_NVIC_SetPriority+0x78>)
 800097e:	f000 000f 	and.w	r0, r0, #15
 8000982:	0109      	lsls	r1, r1, #4
 8000984:	b2c9      	uxtb	r1, r1
 8000986:	4403      	add	r3, r0
 8000988:	7619      	strb	r1, [r3, #24]
 800098a:	f85d fb04 	ldr.w	pc, [sp], #4
 800098e:	bf00      	nop
 8000990:	e000ed00 	.word	0xe000ed00
 8000994:	e000ecfc 	.word	0xe000ecfc

08000998 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000998:	2800      	cmp	r0, #0
 800099a:	db07      	blt.n	80009ac <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800099c:	2301      	movs	r3, #1
 800099e:	f000 011f 	and.w	r1, r0, #31
 80009a2:	4a03      	ldr	r2, [pc, #12]	; (80009b0 <HAL_NVIC_EnableIRQ+0x18>)
 80009a4:	0940      	lsrs	r0, r0, #5
 80009a6:	408b      	lsls	r3, r1
 80009a8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	e000e100 	.word	0xe000e100

080009b4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009b4:	3801      	subs	r0, #1
 80009b6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009ba:	d20f      	bcs.n	80009dc <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009bc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c0:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009c4:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009c6:	2107      	movs	r1, #7
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009c8:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ca:	4c05      	ldr	r4, [pc, #20]	; (80009e0 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009cc:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ce:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009d2:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009d4:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 80009d6:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009d8:	6119      	str	r1, [r3, #16]
 80009da:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80009dc:	2001      	movs	r0, #1
 80009de:	4770      	bx	lr
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <HAL_DMA_Abort>:
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80009e4:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 80009e8:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80009ea:	2a02      	cmp	r2, #2
 80009ec:	d006      	beq.n	80009fc <HAL_DMA_Abort+0x18>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009ee:	2204      	movs	r2, #4
 80009f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009f2:	2200      	movs	r2, #0
    
    return HAL_ERROR;
 80009f4:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 80009f6:	f883 2020 	strb.w	r2, [r3, #32]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
  
  return status; 
}
 80009fa:	4770      	bx	lr
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80009fc:	f04f 0c01 	mov.w	ip, #1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a00:	681a      	ldr	r2, [r3, #0]
  return status; 
 8000a02:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a04:	6811      	ldr	r1, [r2, #0]
 8000a06:	f021 010e 	bic.w	r1, r1, #14
 8000a0a:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8000a0c:	6811      	ldr	r1, [r2, #0]
 8000a0e:	f021 0101 	bic.w	r1, r1, #1
 8000a12:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000a14:	e9d3 120f 	ldrd	r1, r2, [r3, #60]	; 0x3c
 8000a18:	fa0c f202 	lsl.w	r2, ip, r2
 8000a1c:	604a      	str	r2, [r1, #4]
    __HAL_UNLOCK(hdma);
 8000a1e:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000a20:	f883 c021 	strb.w	ip, [r3, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000a24:	f883 2020 	strb.w	r2, [r3, #32]
}
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop

08000a2c <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a2c:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{  
 8000a30:	4603      	mov	r3, r0
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a32:	2a02      	cmp	r2, #2
 8000a34:	d003      	beq.n	8000a3e <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a36:	2204      	movs	r2, #4
        
    status = HAL_ERROR;
 8000a38:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a3a:	639a      	str	r2, [r3, #56]	; 0x38
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8000a3c:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a3e:	6802      	ldr	r2, [r0, #0]
{  
 8000a40:	b510      	push	{r4, lr}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a42:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000a44:	481c      	ldr	r0, [pc, #112]	; (8000ab8 <HAL_DMA_Abort_IT+0x8c>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a46:	f021 010e 	bic.w	r1, r1, #14
 8000a4a:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8000a4c:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000a4e:	4282      	cmp	r2, r0
    __HAL_DMA_DISABLE(hdma);
 8000a50:	f021 0101 	bic.w	r1, r1, #1
 8000a54:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000a56:	d024      	beq.n	8000aa2 <HAL_DMA_Abort_IT+0x76>
 8000a58:	4918      	ldr	r1, [pc, #96]	; (8000abc <HAL_DMA_Abort_IT+0x90>)
 8000a5a:	428a      	cmp	r2, r1
 8000a5c:	d01d      	beq.n	8000a9a <HAL_DMA_Abort_IT+0x6e>
 8000a5e:	3114      	adds	r1, #20
 8000a60:	428a      	cmp	r2, r1
 8000a62:	d020      	beq.n	8000aa6 <HAL_DMA_Abort_IT+0x7a>
 8000a64:	3114      	adds	r1, #20
 8000a66:	428a      	cmp	r2, r1
 8000a68:	d020      	beq.n	8000aac <HAL_DMA_Abort_IT+0x80>
 8000a6a:	3114      	adds	r1, #20
 8000a6c:	428a      	cmp	r2, r1
 8000a6e:	d020      	beq.n	8000ab2 <HAL_DMA_Abort_IT+0x86>
 8000a70:	3114      	adds	r1, #20
 8000a72:	428a      	cmp	r2, r1
 8000a74:	bf0c      	ite	eq
 8000a76:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 8000a7a:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
    hdma->State = HAL_DMA_STATE_READY;
 8000a7e:	2101      	movs	r1, #1
    __HAL_UNLOCK(hdma);
 8000a80:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000a82:	480f      	ldr	r0, [pc, #60]	; (8000ac0 <HAL_DMA_Abort_IT+0x94>)
 8000a84:	6042      	str	r2, [r0, #4]
    if(hdma->XferAbortCallback != NULL)
 8000a86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8000a88:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000a8c:	f883 4020 	strb.w	r4, [r3, #32]
    if(hdma->XferAbortCallback != NULL)
 8000a90:	b12a      	cbz	r2, 8000a9e <HAL_DMA_Abort_IT+0x72>
      hdma->XferAbortCallback(hdma);
 8000a92:	4618      	mov	r0, r3
 8000a94:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8000a96:	4620      	mov	r0, r4
}
 8000a98:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000a9a:	2210      	movs	r2, #16
 8000a9c:	e7ef      	b.n	8000a7e <HAL_DMA_Abort_IT+0x52>
  HAL_StatusTypeDef status = HAL_OK;
 8000a9e:	4610      	mov	r0, r2
}
 8000aa0:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	e7eb      	b.n	8000a7e <HAL_DMA_Abort_IT+0x52>
 8000aa6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000aaa:	e7e8      	b.n	8000a7e <HAL_DMA_Abort_IT+0x52>
 8000aac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ab0:	e7e5      	b.n	8000a7e <HAL_DMA_Abort_IT+0x52>
 8000ab2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ab6:	e7e2      	b.n	8000a7e <HAL_DMA_Abort_IT+0x52>
 8000ab8:	40020008 	.word	0x40020008
 8000abc:	4002001c 	.word	0x4002001c
 8000ac0:	40020000 	.word	0x40020000

08000ac4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ac8:	680e      	ldr	r6, [r1, #0]
{
 8000aca:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000acc:	2e00      	cmp	r6, #0
 8000ace:	f000 80b5 	beq.w	8000c3c <HAL_GPIO_Init+0x178>
 8000ad2:	2200      	movs	r2, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ad4:	4f7a      	ldr	r7, [pc, #488]	; (8000cc0 <HAL_GPIO_Init+0x1fc>)
  uint32_t config = 0x00u;
 8000ad6:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 8000ad8:	4613      	mov	r3, r2
        {
          SET_BIT(EXTI->IMR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ada:	4d7a      	ldr	r5, [pc, #488]	; (8000cc4 <HAL_GPIO_Init+0x200>)
      switch (GPIO_Init->Mode)
 8000adc:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 8000cc8 <HAL_GPIO_Init+0x204>
 8000ae0:	e006      	b.n	8000af0 <HAL_GPIO_Init+0x2c>
        }
      }
    }

	position++;
 8000ae2:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ae4:	fa36 f403 	lsrs.w	r4, r6, r3
 8000ae8:	f102 0204 	add.w	r2, r2, #4
 8000aec:	f000 80a6 	beq.w	8000c3c <HAL_GPIO_Init+0x178>
    ioposition = (0x01uL << position);
 8000af0:	2401      	movs	r4, #1
 8000af2:	409c      	lsls	r4, r3
    if (iocurrent == ioposition)
 8000af4:	ea34 0e06 	bics.w	lr, r4, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000af8:	ea04 0c06 	and.w	ip, r4, r6
    if (iocurrent == ioposition)
 8000afc:	d1f1      	bne.n	8000ae2 <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 8000afe:	684e      	ldr	r6, [r1, #4]
 8000b00:	2e12      	cmp	r6, #18
 8000b02:	f200 809e 	bhi.w	8000c42 <HAL_GPIO_Init+0x17e>
 8000b06:	2e12      	cmp	r6, #18
 8000b08:	d81a      	bhi.n	8000b40 <HAL_GPIO_Init+0x7c>
 8000b0a:	e8df f006 	tbb	[pc, r6]
 8000b0e:	b9a7      	.short	0xb9a7
 8000b10:	1919ceb5 	.word	0x1919ceb5
 8000b14:	19191919 	.word	0x19191919
 8000b18:	19191919 	.word	0x19191919
 8000b1c:	b1191919 	.word	0xb1191919
 8000b20:	bc          	.byte	0xbc
 8000b21:	00          	.byte	0x00
 8000b22:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8000ccc <HAL_GPIO_Init+0x208>
 8000b26:	4576      	cmp	r6, lr
 8000b28:	f000 8098 	beq.w	8000c5c <HAL_GPIO_Init+0x198>
 8000b2c:	f50e 2e70 	add.w	lr, lr, #983040	; 0xf0000
 8000b30:	4576      	cmp	r6, lr
 8000b32:	f000 8093 	beq.w	8000c5c <HAL_GPIO_Init+0x198>
 8000b36:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 8000b3a:	4576      	cmp	r6, lr
 8000b3c:	f000 808e 	beq.w	8000c5c <HAL_GPIO_Init+0x198>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b40:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8000b44:	bf9c      	itt	ls
 8000b46:	4686      	movls	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b48:	4693      	movls	fp, r2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b4a:	f04f 060f 	mov.w	r6, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b4e:	bf84      	itt	hi
 8000b50:	f100 0e04 	addhi.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b54:	f1a2 0b20 	subhi.w	fp, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b58:	f8de 4000 	ldr.w	r4, [lr]
 8000b5c:	fa0a f90b 	lsl.w	r9, sl, fp
 8000b60:	fa06 fb0b 	lsl.w	fp, r6, fp
 8000b64:	ea24 040b 	bic.w	r4, r4, fp
 8000b68:	ea44 0409 	orr.w	r4, r4, r9
 8000b6c:	f8ce 4000 	str.w	r4, [lr]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b70:	684c      	ldr	r4, [r1, #4]
 8000b72:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8000b76:	d079      	beq.n	8000c6c <HAL_GPIO_Init+0x1a8>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b78:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b7c:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b80:	f04e 0e01 	orr.w	lr, lr, #1
 8000b84:	f8c7 e018 	str.w	lr, [r7, #24]
 8000b88:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b8c:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b90:	f00e 0e01 	and.w	lr, lr, #1
 8000b94:	f8cd e004 	str.w	lr, [sp, #4]
 8000b98:	f8dd e004 	ldr.w	lr, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8000b9c:	f023 0e03 	bic.w	lr, r3, #3
 8000ba0:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 8000ba4:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8000ba8:	f8de b008 	ldr.w	fp, [lr, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bac:	fa06 f609 	lsl.w	r6, r6, r9
 8000bb0:	ea2b 0606 	bic.w	r6, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bb4:	f8df b118 	ldr.w	fp, [pc, #280]	; 8000cd0 <HAL_GPIO_Init+0x20c>
 8000bb8:	4558      	cmp	r0, fp
 8000bba:	d013      	beq.n	8000be4 <HAL_GPIO_Init+0x120>
 8000bbc:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
 8000bc0:	4558      	cmp	r0, fp
 8000bc2:	d06b      	beq.n	8000c9c <HAL_GPIO_Init+0x1d8>
 8000bc4:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8000cd4 <HAL_GPIO_Init+0x210>
 8000bc8:	4558      	cmp	r0, fp
 8000bca:	d060      	beq.n	8000c8e <HAL_GPIO_Init+0x1ca>
 8000bcc:	f8df b108 	ldr.w	fp, [pc, #264]	; 8000cd8 <HAL_GPIO_Init+0x214>
 8000bd0:	4558      	cmp	r0, fp
 8000bd2:	bf0c      	ite	eq
 8000bd4:	f04f 0b03 	moveq.w	fp, #3
 8000bd8:	f04f 0b04 	movne.w	fp, #4
 8000bdc:	fa0b f909 	lsl.w	r9, fp, r9
 8000be0:	ea46 0609 	orr.w	r6, r6, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8000be4:	f8ce 6008 	str.w	r6, [lr, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000be8:	68ae      	ldr	r6, [r5, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bea:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bee:	bf14      	ite	ne
 8000bf0:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000bf4:	ea26 060c 	biceq.w	r6, r6, ip
 8000bf8:	60ae      	str	r6, [r5, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bfa:	68ee      	ldr	r6, [r5, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bfc:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c00:	bf14      	ite	ne
 8000c02:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c06:	ea26 060c 	biceq.w	r6, r6, ip
 8000c0a:	60ee      	str	r6, [r5, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8000c0c:	686e      	ldr	r6, [r5, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c0e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000c12:	bf14      	ite	ne
 8000c14:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c18:	ea26 060c 	biceq.w	r6, r6, ip
 8000c1c:	606e      	str	r6, [r5, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c1e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000c22:	682c      	ldr	r4, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c24:	d01f      	beq.n	8000c66 <HAL_GPIO_Init+0x1a2>
          SET_BIT(EXTI->IMR, iocurrent);
 8000c26:	ea44 040c 	orr.w	r4, r4, ip
 8000c2a:	602c      	str	r4, [r5, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c2c:	680e      	ldr	r6, [r1, #0]
	position++;
 8000c2e:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c30:	fa36 f403 	lsrs.w	r4, r6, r3
 8000c34:	f102 0204 	add.w	r2, r2, #4
 8000c38:	f47f af5a 	bne.w	8000af0 <HAL_GPIO_Init+0x2c>
  }
}
 8000c3c:	b003      	add	sp, #12
 8000c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000c42:	4546      	cmp	r6, r8
 8000c44:	d00a      	beq.n	8000c5c <HAL_GPIO_Init+0x198>
 8000c46:	f67f af6c 	bls.w	8000b22 <HAL_GPIO_Init+0x5e>
 8000c4a:	f8df e090 	ldr.w	lr, [pc, #144]	; 8000cdc <HAL_GPIO_Init+0x218>
 8000c4e:	4576      	cmp	r6, lr
 8000c50:	d004      	beq.n	8000c5c <HAL_GPIO_Init+0x198>
 8000c52:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8000c56:	4576      	cmp	r6, lr
 8000c58:	f47f af72 	bne.w	8000b40 <HAL_GPIO_Init+0x7c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c5c:	688e      	ldr	r6, [r1, #8]
 8000c5e:	bb3e      	cbnz	r6, 8000cb0 <HAL_GPIO_Init+0x1ec>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c60:	f04f 0a04 	mov.w	sl, #4
 8000c64:	e76c      	b.n	8000b40 <HAL_GPIO_Init+0x7c>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c66:	ea24 040c 	bic.w	r4, r4, ip
 8000c6a:	602c      	str	r4, [r5, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c6c:	680e      	ldr	r6, [r1, #0]
 8000c6e:	e738      	b.n	8000ae2 <HAL_GPIO_Init+0x1e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c70:	68cc      	ldr	r4, [r1, #12]
 8000c72:	f104 0a04 	add.w	sl, r4, #4
          break;
 8000c76:	e763      	b.n	8000b40 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c78:	68cc      	ldr	r4, [r1, #12]
 8000c7a:	f104 0a08 	add.w	sl, r4, #8
          break;
 8000c7e:	e75f      	b.n	8000b40 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c80:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 8000c84:	e75c      	b.n	8000b40 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c86:	68cc      	ldr	r4, [r1, #12]
 8000c88:	f104 0a0c 	add.w	sl, r4, #12
          break;
 8000c8c:	e758      	b.n	8000b40 <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c8e:	f04f 0b02 	mov.w	fp, #2
 8000c92:	fa0b f909 	lsl.w	r9, fp, r9
 8000c96:	ea46 0609 	orr.w	r6, r6, r9
 8000c9a:	e7a3      	b.n	8000be4 <HAL_GPIO_Init+0x120>
 8000c9c:	f04f 0b01 	mov.w	fp, #1
 8000ca0:	fa0b f909 	lsl.w	r9, fp, r9
 8000ca4:	ea46 0609 	orr.w	r6, r6, r9
 8000ca8:	e79c      	b.n	8000be4 <HAL_GPIO_Init+0x120>
      switch (GPIO_Init->Mode)
 8000caa:	f04f 0a00 	mov.w	sl, #0
 8000cae:	e747      	b.n	8000b40 <HAL_GPIO_Init+0x7c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cb0:	2e01      	cmp	r6, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cb2:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 8000cb6:	bf0c      	ite	eq
 8000cb8:	6104      	streq	r4, [r0, #16]
            GPIOx->BRR = ioposition;
 8000cba:	6144      	strne	r4, [r0, #20]
 8000cbc:	e740      	b.n	8000b40 <HAL_GPIO_Init+0x7c>
 8000cbe:	bf00      	nop
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	40010400 	.word	0x40010400
 8000cc8:	10220000 	.word	0x10220000
 8000ccc:	10120000 	.word	0x10120000
 8000cd0:	40010800 	.word	0x40010800
 8000cd4:	40011000 	.word	0x40011000
 8000cd8:	40011400 	.word	0x40011400
 8000cdc:	10310000 	.word	0x10310000

08000ce0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000ce0:	6883      	ldr	r3, [r0, #8]
 8000ce2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000ce4:	bf14      	ite	ne
 8000ce6:	2001      	movne	r0, #1
 8000ce8:	2000      	moveq	r0, #0
 8000cea:	4770      	bx	lr

08000cec <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cec:	b902      	cbnz	r2, 8000cf0 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cee:	0409      	lsls	r1, r1, #16
 8000cf0:	6101      	str	r1, [r0, #16]
  }
}
 8000cf2:	4770      	bx	lr

08000cf4 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000cf4:	4a04      	ldr	r2, [pc, #16]	; (8000d08 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000cf6:	6951      	ldr	r1, [r2, #20]
 8000cf8:	4201      	tst	r1, r0
 8000cfa:	d100      	bne.n	8000cfe <HAL_GPIO_EXTI_IRQHandler+0xa>
 8000cfc:	4770      	bx	lr
{
 8000cfe:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d00:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d02:	f7ff fa23 	bl	800014c <HAL_GPIO_EXTI_Callback>
  }
}
 8000d06:	bd08      	pop	{r3, pc}
 8000d08:	40010400 	.word	0x40010400

08000d0c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d0c:	2800      	cmp	r0, #0
 8000d0e:	f000 81b6 	beq.w	800107e <HAL_RCC_OscConfig+0x372>
{
 8000d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d16:	6803      	ldr	r3, [r0, #0]
 8000d18:	4604      	mov	r4, r0
 8000d1a:	07dd      	lsls	r5, r3, #31
{
 8000d1c:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d1e:	d535      	bpl.n	8000d8c <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d20:	499a      	ldr	r1, [pc, #616]	; (8000f8c <HAL_RCC_OscConfig+0x280>)
 8000d22:	684a      	ldr	r2, [r1, #4]
 8000d24:	f002 020c 	and.w	r2, r2, #12
 8000d28:	2a04      	cmp	r2, #4
 8000d2a:	f000 80ef 	beq.w	8000f0c <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d2e:	684a      	ldr	r2, [r1, #4]
 8000d30:	f002 020c 	and.w	r2, r2, #12
 8000d34:	2a08      	cmp	r2, #8
 8000d36:	f000 80e5 	beq.w	8000f04 <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d3a:	6863      	ldr	r3, [r4, #4]
 8000d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d40:	d010      	beq.n	8000d64 <HAL_RCC_OscConfig+0x58>
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f000 810c 	beq.w	8000f60 <HAL_RCC_OscConfig+0x254>
 8000d48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d4c:	f000 8182 	beq.w	8001054 <HAL_RCC_OscConfig+0x348>
 8000d50:	4b8e      	ldr	r3, [pc, #568]	; (8000f8c <HAL_RCC_OscConfig+0x280>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	e004      	b.n	8000d6e <HAL_RCC_OscConfig+0x62>
 8000d64:	4a89      	ldr	r2, [pc, #548]	; (8000f8c <HAL_RCC_OscConfig+0x280>)
 8000d66:	6813      	ldr	r3, [r2, #0]
 8000d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d6c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d6e:	f7ff fdab 	bl	80008c8 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d72:	4e86      	ldr	r6, [pc, #536]	; (8000f8c <HAL_RCC_OscConfig+0x280>)
        tickstart = HAL_GetTick();
 8000d74:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d76:	e005      	b.n	8000d84 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d78:	f7ff fda6 	bl	80008c8 <HAL_GetTick>
 8000d7c:	1b40      	subs	r0, r0, r5
 8000d7e:	2864      	cmp	r0, #100	; 0x64
 8000d80:	f200 80ea 	bhi.w	8000f58 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d84:	6833      	ldr	r3, [r6, #0]
 8000d86:	039a      	lsls	r2, r3, #14
 8000d88:	d5f6      	bpl.n	8000d78 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d8a:	6823      	ldr	r3, [r4, #0]
 8000d8c:	079f      	lsls	r7, r3, #30
 8000d8e:	d528      	bpl.n	8000de2 <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d90:	4a7e      	ldr	r2, [pc, #504]	; (8000f8c <HAL_RCC_OscConfig+0x280>)
 8000d92:	6851      	ldr	r1, [r2, #4]
 8000d94:	f011 0f0c 	tst.w	r1, #12
 8000d98:	f000 808d 	beq.w	8000eb6 <HAL_RCC_OscConfig+0x1aa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d9c:	6851      	ldr	r1, [r2, #4]
 8000d9e:	f001 010c 	and.w	r1, r1, #12
 8000da2:	2908      	cmp	r1, #8
 8000da4:	f000 8083 	beq.w	8000eae <HAL_RCC_OscConfig+0x1a2>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000da8:	6923      	ldr	r3, [r4, #16]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	f000 8118 	beq.w	8000fe0 <HAL_RCC_OscConfig+0x2d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000db0:	2201      	movs	r2, #1
 8000db2:	4b77      	ldr	r3, [pc, #476]	; (8000f90 <HAL_RCC_OscConfig+0x284>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000db4:	4e75      	ldr	r6, [pc, #468]	; (8000f8c <HAL_RCC_OscConfig+0x280>)
        __HAL_RCC_HSI_ENABLE();
 8000db6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000db8:	f7ff fd86 	bl	80008c8 <HAL_GetTick>
 8000dbc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dbe:	e005      	b.n	8000dcc <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dc0:	f7ff fd82 	bl	80008c8 <HAL_GetTick>
 8000dc4:	1b40      	subs	r0, r0, r5
 8000dc6:	2802      	cmp	r0, #2
 8000dc8:	f200 80c6 	bhi.w	8000f58 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dcc:	6833      	ldr	r3, [r6, #0]
 8000dce:	0798      	lsls	r0, r3, #30
 8000dd0:	d5f6      	bpl.n	8000dc0 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dd2:	6833      	ldr	r3, [r6, #0]
 8000dd4:	6962      	ldr	r2, [r4, #20]
 8000dd6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000dda:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000dde:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000de0:	6823      	ldr	r3, [r4, #0]
 8000de2:	071a      	lsls	r2, r3, #28
 8000de4:	d41f      	bmi.n	8000e26 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000de6:	075d      	lsls	r5, r3, #29
 8000de8:	d542      	bpl.n	8000e70 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dea:	4b68      	ldr	r3, [pc, #416]	; (8000f8c <HAL_RCC_OscConfig+0x280>)
 8000dec:	69da      	ldr	r2, [r3, #28]
 8000dee:	00d0      	lsls	r0, r2, #3
 8000df0:	d57d      	bpl.n	8000eee <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 8000df2:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000df4:	4e67      	ldr	r6, [pc, #412]	; (8000f94 <HAL_RCC_OscConfig+0x288>)
 8000df6:	6833      	ldr	r3, [r6, #0]
 8000df8:	05d9      	lsls	r1, r3, #23
 8000dfa:	f140 809d 	bpl.w	8000f38 <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dfe:	68e3      	ldr	r3, [r4, #12]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	f000 80fe 	beq.w	8001002 <HAL_RCC_OscConfig+0x2f6>
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	f000 80ca 	beq.w	8000fa0 <HAL_RCC_OscConfig+0x294>
 8000e0c:	2b05      	cmp	r3, #5
 8000e0e:	4b5f      	ldr	r3, [pc, #380]	; (8000f8c <HAL_RCC_OscConfig+0x280>)
 8000e10:	6a1a      	ldr	r2, [r3, #32]
 8000e12:	f000 812c 	beq.w	800106e <HAL_RCC_OscConfig+0x362>
 8000e16:	f022 0201 	bic.w	r2, r2, #1
 8000e1a:	621a      	str	r2, [r3, #32]
 8000e1c:	6a1a      	ldr	r2, [r3, #32]
 8000e1e:	f022 0204 	bic.w	r2, r2, #4
 8000e22:	621a      	str	r2, [r3, #32]
 8000e24:	e0f2      	b.n	800100c <HAL_RCC_OscConfig+0x300>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e26:	69a3      	ldr	r3, [r4, #24]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d04f      	beq.n	8000ecc <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_LSI_ENABLE();
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	4b58      	ldr	r3, [pc, #352]	; (8000f90 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e30:	4e56      	ldr	r6, [pc, #344]	; (8000f8c <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_ENABLE();
 8000e32:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8000e36:	f7ff fd47 	bl	80008c8 <HAL_GetTick>
 8000e3a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e3c:	e005      	b.n	8000e4a <HAL_RCC_OscConfig+0x13e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e3e:	f7ff fd43 	bl	80008c8 <HAL_GetTick>
 8000e42:	1b40      	subs	r0, r0, r5
 8000e44:	2802      	cmp	r0, #2
 8000e46:	f200 8087 	bhi.w	8000f58 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e4a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8000e4c:	079b      	lsls	r3, r3, #30
 8000e4e:	d5f6      	bpl.n	8000e3e <HAL_RCC_OscConfig+0x132>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000e50:	4b51      	ldr	r3, [pc, #324]	; (8000f98 <HAL_RCC_OscConfig+0x28c>)
 8000e52:	4a52      	ldr	r2, [pc, #328]	; (8000f9c <HAL_RCC_OscConfig+0x290>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	fba2 2303 	umull	r2, r3, r2, r3
 8000e5a:	0a5b      	lsrs	r3, r3, #9
 8000e5c:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000e5e:	bf00      	nop
  }
  while (Delay --);
 8000e60:	9b01      	ldr	r3, [sp, #4]
 8000e62:	1e5a      	subs	r2, r3, #1
 8000e64:	9201      	str	r2, [sp, #4]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d1f9      	bne.n	8000e5e <HAL_RCC_OscConfig+0x152>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e6a:	6823      	ldr	r3, [r4, #0]
 8000e6c:	075d      	lsls	r5, r3, #29
 8000e6e:	d4bc      	bmi.n	8000dea <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e70:	69e0      	ldr	r0, [r4, #28]
 8000e72:	b1c0      	cbz	r0, 8000ea6 <HAL_RCC_OscConfig+0x19a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e74:	4d45      	ldr	r5, [pc, #276]	; (8000f8c <HAL_RCC_OscConfig+0x280>)
 8000e76:	686b      	ldr	r3, [r5, #4]
 8000e78:	f003 030c 	and.w	r3, r3, #12
 8000e7c:	2b08      	cmp	r3, #8
 8000e7e:	f000 80d8 	beq.w	8001032 <HAL_RCC_OscConfig+0x326>
        __HAL_RCC_PLL_DISABLE();
 8000e82:	2200      	movs	r2, #0
 8000e84:	4b42      	ldr	r3, [pc, #264]	; (8000f90 <HAL_RCC_OscConfig+0x284>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e86:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000e88:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e8a:	f000 80fa 	beq.w	8001082 <HAL_RCC_OscConfig+0x376>
        tickstart = HAL_GetTick();
 8000e8e:	f7ff fd1b 	bl	80008c8 <HAL_GetTick>
 8000e92:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e94:	e004      	b.n	8000ea0 <HAL_RCC_OscConfig+0x194>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e96:	f7ff fd17 	bl	80008c8 <HAL_GetTick>
 8000e9a:	1b00      	subs	r0, r0, r4
 8000e9c:	2802      	cmp	r0, #2
 8000e9e:	d85b      	bhi.n	8000f58 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ea0:	682b      	ldr	r3, [r5, #0]
 8000ea2:	019b      	lsls	r3, r3, #6
 8000ea4:	d4f7      	bmi.n	8000e96 <HAL_RCC_OscConfig+0x18a>
  return HAL_OK;
 8000ea6:	2000      	movs	r0, #0
}
 8000ea8:	b002      	add	sp, #8
 8000eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000eae:	6852      	ldr	r2, [r2, #4]
 8000eb0:	03d6      	lsls	r6, r2, #15
 8000eb2:	f53f af79 	bmi.w	8000da8 <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eb6:	4a35      	ldr	r2, [pc, #212]	; (8000f8c <HAL_RCC_OscConfig+0x280>)
 8000eb8:	6812      	ldr	r2, [r2, #0]
 8000eba:	0795      	lsls	r5, r2, #30
 8000ebc:	d530      	bpl.n	8000f20 <HAL_RCC_OscConfig+0x214>
 8000ebe:	6922      	ldr	r2, [r4, #16]
 8000ec0:	2a01      	cmp	r2, #1
 8000ec2:	d02d      	beq.n	8000f20 <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 8000ec4:	2001      	movs	r0, #1
}
 8000ec6:	b002      	add	sp, #8
 8000ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8000ecc:	4a30      	ldr	r2, [pc, #192]	; (8000f90 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ece:	4e2f      	ldr	r6, [pc, #188]	; (8000f8c <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_DISABLE();
 8000ed0:	f8c2 3480 	str.w	r3, [r2, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8000ed4:	f7ff fcf8 	bl	80008c8 <HAL_GetTick>
 8000ed8:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eda:	e004      	b.n	8000ee6 <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000edc:	f7ff fcf4 	bl	80008c8 <HAL_GetTick>
 8000ee0:	1b40      	subs	r0, r0, r5
 8000ee2:	2802      	cmp	r0, #2
 8000ee4:	d838      	bhi.n	8000f58 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ee6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8000ee8:	079f      	lsls	r7, r3, #30
 8000eea:	d4f7      	bmi.n	8000edc <HAL_RCC_OscConfig+0x1d0>
 8000eec:	e7bd      	b.n	8000e6a <HAL_RCC_OscConfig+0x15e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000eee:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8000ef0:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ef2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ef6:	61da      	str	r2, [r3, #28]
 8000ef8:	69db      	ldr	r3, [r3, #28]
 8000efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efe:	9300      	str	r3, [sp, #0]
 8000f00:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8000f02:	e777      	b.n	8000df4 <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f04:	684a      	ldr	r2, [r1, #4]
 8000f06:	03d0      	lsls	r0, r2, #15
 8000f08:	f57f af17 	bpl.w	8000d3a <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f0c:	4a1f      	ldr	r2, [pc, #124]	; (8000f8c <HAL_RCC_OscConfig+0x280>)
 8000f0e:	6812      	ldr	r2, [r2, #0]
 8000f10:	0391      	lsls	r1, r2, #14
 8000f12:	f57f af3b 	bpl.w	8000d8c <HAL_RCC_OscConfig+0x80>
 8000f16:	6862      	ldr	r2, [r4, #4]
 8000f18:	2a00      	cmp	r2, #0
 8000f1a:	f47f af37 	bne.w	8000d8c <HAL_RCC_OscConfig+0x80>
 8000f1e:	e7d1      	b.n	8000ec4 <HAL_RCC_OscConfig+0x1b8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f20:	491a      	ldr	r1, [pc, #104]	; (8000f8c <HAL_RCC_OscConfig+0x280>)
 8000f22:	6960      	ldr	r0, [r4, #20]
 8000f24:	680a      	ldr	r2, [r1, #0]
 8000f26:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000f2a:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8000f2e:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f30:	071a      	lsls	r2, r3, #28
 8000f32:	f57f af58 	bpl.w	8000de6 <HAL_RCC_OscConfig+0xda>
 8000f36:	e776      	b.n	8000e26 <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f38:	6833      	ldr	r3, [r6, #0]
 8000f3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f3e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000f40:	f7ff fcc2 	bl	80008c8 <HAL_GetTick>
 8000f44:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f46:	6833      	ldr	r3, [r6, #0]
 8000f48:	05da      	lsls	r2, r3, #23
 8000f4a:	f53f af58 	bmi.w	8000dfe <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f4e:	f7ff fcbb 	bl	80008c8 <HAL_GetTick>
 8000f52:	1bc0      	subs	r0, r0, r7
 8000f54:	2864      	cmp	r0, #100	; 0x64
 8000f56:	d9f6      	bls.n	8000f46 <HAL_RCC_OscConfig+0x23a>
            return HAL_TIMEOUT;
 8000f58:	2003      	movs	r0, #3
}
 8000f5a:	b002      	add	sp, #8
 8000f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f60:	4d0a      	ldr	r5, [pc, #40]	; (8000f8c <HAL_RCC_OscConfig+0x280>)
 8000f62:	682b      	ldr	r3, [r5, #0]
 8000f64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f68:	602b      	str	r3, [r5, #0]
 8000f6a:	682b      	ldr	r3, [r5, #0]
 8000f6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f70:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f72:	f7ff fca9 	bl	80008c8 <HAL_GetTick>
 8000f76:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f78:	e004      	b.n	8000f84 <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f7a:	f7ff fca5 	bl	80008c8 <HAL_GetTick>
 8000f7e:	1b80      	subs	r0, r0, r6
 8000f80:	2864      	cmp	r0, #100	; 0x64
 8000f82:	d8e9      	bhi.n	8000f58 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f84:	682b      	ldr	r3, [r5, #0]
 8000f86:	039b      	lsls	r3, r3, #14
 8000f88:	d4f7      	bmi.n	8000f7a <HAL_RCC_OscConfig+0x26e>
 8000f8a:	e6fe      	b.n	8000d8a <HAL_RCC_OscConfig+0x7e>
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	42420000 	.word	0x42420000
 8000f94:	40007000 	.word	0x40007000
 8000f98:	20000008 	.word	0x20000008
 8000f9c:	10624dd3 	.word	0x10624dd3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fa0:	4e50      	ldr	r6, [pc, #320]	; (80010e4 <HAL_RCC_OscConfig+0x3d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fa2:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fa6:	6a33      	ldr	r3, [r6, #32]
 8000fa8:	f023 0301 	bic.w	r3, r3, #1
 8000fac:	6233      	str	r3, [r6, #32]
 8000fae:	6a33      	ldr	r3, [r6, #32]
 8000fb0:	f023 0304 	bic.w	r3, r3, #4
 8000fb4:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8000fb6:	f7ff fc87 	bl	80008c8 <HAL_GetTick>
 8000fba:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fbc:	e004      	b.n	8000fc8 <HAL_RCC_OscConfig+0x2bc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fbe:	f7ff fc83 	bl	80008c8 <HAL_GetTick>
 8000fc2:	1bc0      	subs	r0, r0, r7
 8000fc4:	4540      	cmp	r0, r8
 8000fc6:	d8c7      	bhi.n	8000f58 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fc8:	6a33      	ldr	r3, [r6, #32]
 8000fca:	0798      	lsls	r0, r3, #30
 8000fcc:	d4f7      	bmi.n	8000fbe <HAL_RCC_OscConfig+0x2b2>
    if (pwrclkchanged == SET)
 8000fce:	2d00      	cmp	r5, #0
 8000fd0:	f43f af4e 	beq.w	8000e70 <HAL_RCC_OscConfig+0x164>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fd4:	4a43      	ldr	r2, [pc, #268]	; (80010e4 <HAL_RCC_OscConfig+0x3d8>)
 8000fd6:	69d3      	ldr	r3, [r2, #28]
 8000fd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fdc:	61d3      	str	r3, [r2, #28]
 8000fde:	e747      	b.n	8000e70 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8000fe0:	4a41      	ldr	r2, [pc, #260]	; (80010e8 <HAL_RCC_OscConfig+0x3dc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fe2:	4e40      	ldr	r6, [pc, #256]	; (80010e4 <HAL_RCC_OscConfig+0x3d8>)
        __HAL_RCC_HSI_DISABLE();
 8000fe4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000fe6:	f7ff fc6f 	bl	80008c8 <HAL_GetTick>
 8000fea:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fec:	e004      	b.n	8000ff8 <HAL_RCC_OscConfig+0x2ec>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fee:	f7ff fc6b 	bl	80008c8 <HAL_GetTick>
 8000ff2:	1b40      	subs	r0, r0, r5
 8000ff4:	2802      	cmp	r0, #2
 8000ff6:	d8af      	bhi.n	8000f58 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ff8:	6833      	ldr	r3, [r6, #0]
 8000ffa:	0799      	lsls	r1, r3, #30
 8000ffc:	d4f7      	bmi.n	8000fee <HAL_RCC_OscConfig+0x2e2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ffe:	6823      	ldr	r3, [r4, #0]
 8001000:	e6ef      	b.n	8000de2 <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001002:	4a38      	ldr	r2, [pc, #224]	; (80010e4 <HAL_RCC_OscConfig+0x3d8>)
 8001004:	6a13      	ldr	r3, [r2, #32]
 8001006:	f043 0301 	orr.w	r3, r3, #1
 800100a:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 800100c:	f7ff fc5c 	bl	80008c8 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001010:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001014:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001016:	4f33      	ldr	r7, [pc, #204]	; (80010e4 <HAL_RCC_OscConfig+0x3d8>)
 8001018:	e004      	b.n	8001024 <HAL_RCC_OscConfig+0x318>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800101a:	f7ff fc55 	bl	80008c8 <HAL_GetTick>
 800101e:	1b80      	subs	r0, r0, r6
 8001020:	4540      	cmp	r0, r8
 8001022:	d899      	bhi.n	8000f58 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001024:	6a3b      	ldr	r3, [r7, #32]
 8001026:	079b      	lsls	r3, r3, #30
 8001028:	d5f7      	bpl.n	800101a <HAL_RCC_OscConfig+0x30e>
    if (pwrclkchanged == SET)
 800102a:	2d00      	cmp	r5, #0
 800102c:	f43f af20 	beq.w	8000e70 <HAL_RCC_OscConfig+0x164>
 8001030:	e7d0      	b.n	8000fd4 <HAL_RCC_OscConfig+0x2c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001032:	2801      	cmp	r0, #1
 8001034:	f43f af38 	beq.w	8000ea8 <HAL_RCC_OscConfig+0x19c>
        pll_config = RCC->CFGR;
 8001038:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800103a:	6a22      	ldr	r2, [r4, #32]
 800103c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001040:	4291      	cmp	r1, r2
 8001042:	f47f af3f 	bne.w	8000ec4 <HAL_RCC_OscConfig+0x1b8>
 8001046:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001048:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
    return HAL_ERROR;
 800104c:	1a18      	subs	r0, r3, r0
 800104e:	bf18      	it	ne
 8001050:	2001      	movne	r0, #1
 8001052:	e729      	b.n	8000ea8 <HAL_RCC_OscConfig+0x19c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001054:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001058:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	e67f      	b.n	8000d6e <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800106e:	f042 0204 	orr.w	r2, r2, #4
 8001072:	621a      	str	r2, [r3, #32]
 8001074:	6a1a      	ldr	r2, [r3, #32]
 8001076:	f042 0201 	orr.w	r2, r2, #1
 800107a:	621a      	str	r2, [r3, #32]
 800107c:	e7c6      	b.n	800100c <HAL_RCC_OscConfig+0x300>
    return HAL_ERROR;
 800107e:	2001      	movs	r0, #1
}
 8001080:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8001082:	f7ff fc21 	bl	80008c8 <HAL_GetTick>
 8001086:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001088:	e005      	b.n	8001096 <HAL_RCC_OscConfig+0x38a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800108a:	f7ff fc1d 	bl	80008c8 <HAL_GetTick>
 800108e:	1b80      	subs	r0, r0, r6
 8001090:	2802      	cmp	r0, #2
 8001092:	f63f af61 	bhi.w	8000f58 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001096:	682b      	ldr	r3, [r5, #0]
 8001098:	0199      	lsls	r1, r3, #6
 800109a:	d4f6      	bmi.n	800108a <HAL_RCC_OscConfig+0x37e>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800109c:	6a23      	ldr	r3, [r4, #32]
 800109e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010a2:	d105      	bne.n	80010b0 <HAL_RCC_OscConfig+0x3a4>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010a4:	686a      	ldr	r2, [r5, #4]
 80010a6:	68a1      	ldr	r1, [r4, #8]
 80010a8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80010ac:	430a      	orrs	r2, r1
 80010ae:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80010b0:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010b2:	4d0c      	ldr	r5, [pc, #48]	; (80010e4 <HAL_RCC_OscConfig+0x3d8>)
 80010b4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80010b6:	686a      	ldr	r2, [r5, #4]
 80010b8:	430b      	orrs	r3, r1
 80010ba:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 80010be:	490a      	ldr	r1, [pc, #40]	; (80010e8 <HAL_RCC_OscConfig+0x3dc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010c0:	4313      	orrs	r3, r2
 80010c2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80010c4:	6608      	str	r0, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 80010c6:	f7ff fbff 	bl	80008c8 <HAL_GetTick>
 80010ca:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010cc:	e005      	b.n	80010da <HAL_RCC_OscConfig+0x3ce>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010ce:	f7ff fbfb 	bl	80008c8 <HAL_GetTick>
 80010d2:	1b00      	subs	r0, r0, r4
 80010d4:	2802      	cmp	r0, #2
 80010d6:	f63f af3f 	bhi.w	8000f58 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010da:	682b      	ldr	r3, [r5, #0]
 80010dc:	019a      	lsls	r2, r3, #6
 80010de:	d5f6      	bpl.n	80010ce <HAL_RCC_OscConfig+0x3c2>
 80010e0:	e6e1      	b.n	8000ea6 <HAL_RCC_OscConfig+0x19a>
 80010e2:	bf00      	nop
 80010e4:	40021000 	.word	0x40021000
 80010e8:	42420000 	.word	0x42420000

080010ec <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80010ec:	2800      	cmp	r0, #0
 80010ee:	f000 80a1 	beq.w	8001234 <HAL_RCC_ClockConfig+0x148>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010f2:	4a56      	ldr	r2, [pc, #344]	; (800124c <HAL_RCC_ClockConfig+0x160>)
{
 80010f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010f8:	6813      	ldr	r3, [r2, #0]
 80010fa:	4604      	mov	r4, r0
 80010fc:	f003 0307 	and.w	r3, r3, #7
 8001100:	428b      	cmp	r3, r1
 8001102:	460d      	mov	r5, r1
 8001104:	d20c      	bcs.n	8001120 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001106:	6813      	ldr	r3, [r2, #0]
 8001108:	f023 0307 	bic.w	r3, r3, #7
 800110c:	430b      	orrs	r3, r1
 800110e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001110:	6813      	ldr	r3, [r2, #0]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	428b      	cmp	r3, r1
 8001118:	d002      	beq.n	8001120 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800111a:	2001      	movs	r0, #1
}
 800111c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001120:	6823      	ldr	r3, [r4, #0]
 8001122:	079e      	lsls	r6, r3, #30
 8001124:	d514      	bpl.n	8001150 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001126:	0758      	lsls	r0, r3, #29
 8001128:	d504      	bpl.n	8001134 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800112a:	4949      	ldr	r1, [pc, #292]	; (8001250 <HAL_RCC_ClockConfig+0x164>)
 800112c:	684a      	ldr	r2, [r1, #4]
 800112e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001132:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001134:	0719      	lsls	r1, r3, #28
 8001136:	d504      	bpl.n	8001142 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001138:	4945      	ldr	r1, [pc, #276]	; (8001250 <HAL_RCC_ClockConfig+0x164>)
 800113a:	684a      	ldr	r2, [r1, #4]
 800113c:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8001140:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001142:	4943      	ldr	r1, [pc, #268]	; (8001250 <HAL_RCC_ClockConfig+0x164>)
 8001144:	68a0      	ldr	r0, [r4, #8]
 8001146:	684a      	ldr	r2, [r1, #4]
 8001148:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800114c:	4302      	orrs	r2, r0
 800114e:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001150:	07da      	lsls	r2, r3, #31
 8001152:	d520      	bpl.n	8001196 <HAL_RCC_ClockConfig+0xaa>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001154:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001156:	4b3e      	ldr	r3, [pc, #248]	; (8001250 <HAL_RCC_ClockConfig+0x164>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001158:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800115a:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800115c:	d06c      	beq.n	8001238 <HAL_RCC_ClockConfig+0x14c>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800115e:	2a02      	cmp	r2, #2
 8001160:	d065      	beq.n	800122e <HAL_RCC_ClockConfig+0x142>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001162:	079e      	lsls	r6, r3, #30
 8001164:	d5d9      	bpl.n	800111a <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001166:	4e3a      	ldr	r6, [pc, #232]	; (8001250 <HAL_RCC_ClockConfig+0x164>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001168:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800116c:	6873      	ldr	r3, [r6, #4]
 800116e:	f023 0303 	bic.w	r3, r3, #3
 8001172:	4313      	orrs	r3, r2
 8001174:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001176:	f7ff fba7 	bl	80008c8 <HAL_GetTick>
 800117a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800117c:	e004      	b.n	8001188 <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800117e:	f7ff fba3 	bl	80008c8 <HAL_GetTick>
 8001182:	1bc0      	subs	r0, r0, r7
 8001184:	4540      	cmp	r0, r8
 8001186:	d85a      	bhi.n	800123e <HAL_RCC_ClockConfig+0x152>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001188:	6873      	ldr	r3, [r6, #4]
 800118a:	6862      	ldr	r2, [r4, #4]
 800118c:	f003 030c 	and.w	r3, r3, #12
 8001190:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001194:	d1f3      	bne.n	800117e <HAL_RCC_ClockConfig+0x92>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001196:	4a2d      	ldr	r2, [pc, #180]	; (800124c <HAL_RCC_ClockConfig+0x160>)
 8001198:	6813      	ldr	r3, [r2, #0]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	42ab      	cmp	r3, r5
 80011a0:	d909      	bls.n	80011b6 <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011a2:	6813      	ldr	r3, [r2, #0]
 80011a4:	f023 0307 	bic.w	r3, r3, #7
 80011a8:	432b      	orrs	r3, r5
 80011aa:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ac:	6813      	ldr	r3, [r2, #0]
 80011ae:	f003 0307 	and.w	r3, r3, #7
 80011b2:	42ab      	cmp	r3, r5
 80011b4:	d1b1      	bne.n	800111a <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011b6:	6823      	ldr	r3, [r4, #0]
 80011b8:	0758      	lsls	r0, r3, #29
 80011ba:	d506      	bpl.n	80011ca <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011bc:	4924      	ldr	r1, [pc, #144]	; (8001250 <HAL_RCC_ClockConfig+0x164>)
 80011be:	68e0      	ldr	r0, [r4, #12]
 80011c0:	684a      	ldr	r2, [r1, #4]
 80011c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80011c6:	4302      	orrs	r2, r0
 80011c8:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011ca:	0719      	lsls	r1, r3, #28
 80011cc:	d507      	bpl.n	80011de <HAL_RCC_ClockConfig+0xf2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80011ce:	4a20      	ldr	r2, [pc, #128]	; (8001250 <HAL_RCC_ClockConfig+0x164>)
 80011d0:	6921      	ldr	r1, [r4, #16]
 80011d2:	6853      	ldr	r3, [r2, #4]
 80011d4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80011d8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80011dc:	6053      	str	r3, [r2, #4]
  tmpreg = RCC->CFGR;
 80011de:	491c      	ldr	r1, [pc, #112]	; (8001250 <HAL_RCC_ClockConfig+0x164>)
 80011e0:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80011e2:	f002 030c 	and.w	r3, r2, #12
 80011e6:	2b08      	cmp	r3, #8
 80011e8:	d010      	beq.n	800120c <HAL_RCC_ClockConfig+0x120>
      sysclockfreq = HSE_VALUE;
 80011ea:	4b1a      	ldr	r3, [pc, #104]	; (8001254 <HAL_RCC_ClockConfig+0x168>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80011ec:	4a18      	ldr	r2, [pc, #96]	; (8001250 <HAL_RCC_ClockConfig+0x164>)
 80011ee:	481a      	ldr	r0, [pc, #104]	; (8001258 <HAL_RCC_ClockConfig+0x16c>)
 80011f0:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 80011f2:	491a      	ldr	r1, [pc, #104]	; (800125c <HAL_RCC_ClockConfig+0x170>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80011f4:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80011f8:	5c80      	ldrb	r0, [r0, r2]
 80011fa:	4a19      	ldr	r2, [pc, #100]	; (8001260 <HAL_RCC_ClockConfig+0x174>)
 80011fc:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 80011fe:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001200:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 8001202:	f7ff fb1f 	bl	8000844 <HAL_InitTick>
  return HAL_OK;
 8001206:	2000      	movs	r0, #0
}
 8001208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800120c:	4815      	ldr	r0, [pc, #84]	; (8001264 <HAL_RCC_ClockConfig+0x178>)
 800120e:	f3c2 4383 	ubfx	r3, r2, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001212:	03d2      	lsls	r2, r2, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001214:	5cc3      	ldrb	r3, [r0, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001216:	d514      	bpl.n	8001242 <HAL_RCC_ClockConfig+0x156>
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001218:	480e      	ldr	r0, [pc, #56]	; (8001254 <HAL_RCC_ClockConfig+0x168>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800121a:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800121c:	fb00 f303 	mul.w	r3, r0, r3
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001220:	4911      	ldr	r1, [pc, #68]	; (8001268 <HAL_RCC_ClockConfig+0x17c>)
 8001222:	f3c2 4240 	ubfx	r2, r2, #17, #1
 8001226:	5c8a      	ldrb	r2, [r1, r2]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001228:	fbb3 f3f2 	udiv	r3, r3, r2
 800122c:	e7de      	b.n	80011ec <HAL_RCC_ClockConfig+0x100>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800122e:	019f      	lsls	r7, r3, #6
 8001230:	d499      	bmi.n	8001166 <HAL_RCC_ClockConfig+0x7a>
 8001232:	e772      	b.n	800111a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8001234:	2001      	movs	r0, #1
}
 8001236:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001238:	039b      	lsls	r3, r3, #14
 800123a:	d494      	bmi.n	8001166 <HAL_RCC_ClockConfig+0x7a>
 800123c:	e76d      	b.n	800111a <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 800123e:	2003      	movs	r0, #3
 8001240:	e76c      	b.n	800111c <HAL_RCC_ClockConfig+0x30>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001242:	4a0a      	ldr	r2, [pc, #40]	; (800126c <HAL_RCC_ClockConfig+0x180>)
 8001244:	fb02 f303 	mul.w	r3, r2, r3
 8001248:	e7d0      	b.n	80011ec <HAL_RCC_ClockConfig+0x100>
 800124a:	bf00      	nop
 800124c:	40022000 	.word	0x40022000
 8001250:	40021000 	.word	0x40021000
 8001254:	007a1200 	.word	0x007a1200
 8001258:	08001974 	.word	0x08001974
 800125c:	20000010 	.word	0x20000010
 8001260:	20000008 	.word	0x20000008
 8001264:	0800198c 	.word	0x0800198c
 8001268:	0800199c 	.word	0x0800199c
 800126c:	003d0900 	.word	0x003d0900

08001270 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001270:	4b04      	ldr	r3, [pc, #16]	; (8001284 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8001272:	4a05      	ldr	r2, [pc, #20]	; (8001288 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	4905      	ldr	r1, [pc, #20]	; (800128c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001278:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800127c:	5ccb      	ldrb	r3, [r1, r3]
 800127e:	6810      	ldr	r0, [r2, #0]
}
 8001280:	40d8      	lsrs	r0, r3
 8001282:	4770      	bx	lr
 8001284:	40021000 	.word	0x40021000
 8001288:	20000008 	.word	0x20000008
 800128c:	08001984 	.word	0x08001984

08001290 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001290:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8001292:	4a05      	ldr	r2, [pc, #20]	; (80012a8 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	4905      	ldr	r1, [pc, #20]	; (80012ac <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001298:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800129c:	5ccb      	ldrb	r3, [r1, r3]
 800129e:	6810      	ldr	r0, [r2, #0]
}
 80012a0:	40d8      	lsrs	r0, r3
 80012a2:	4770      	bx	lr
 80012a4:	40021000 	.word	0x40021000
 80012a8:	20000008 	.word	0x20000008
 80012ac:	08001984 	.word	0x08001984

080012b0 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 80012b0:	2800      	cmp	r0, #0
 80012b2:	d065      	beq.n	8001380 <HAL_UART_Init+0xd0>
{
 80012b4:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80012b6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80012ba:	4604      	mov	r4, r0
 80012bc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d055      	beq.n	8001370 <HAL_UART_Init+0xc0>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80012c4:	e9d4 2602 	ldrd	r2, r6, [r4, #8]
  huart->gState = HAL_UART_STATE_BUSY;
 80012c8:	2124      	movs	r1, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80012ca:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80012cc:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 80012d0:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80012d2:	6920      	ldr	r0, [r4, #16]
  __HAL_UART_DISABLE(huart);
 80012d4:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80012d8:	69a5      	ldr	r5, [r4, #24]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80012da:	4302      	orrs	r2, r0
 80012dc:	6960      	ldr	r0, [r4, #20]
  __HAL_UART_DISABLE(huart);
 80012de:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80012e0:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80012e2:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80012e4:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80012e8:	4331      	orrs	r1, r6
 80012ea:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 80012ec:	68d9      	ldr	r1, [r3, #12]


  if(huart->Instance == USART1)
 80012ee:	4825      	ldr	r0, [pc, #148]	; (8001384 <HAL_UART_Init+0xd4>)
  MODIFY_REG(huart->Instance->CR1,
 80012f0:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 80012f4:	f021 010c 	bic.w	r1, r1, #12
 80012f8:	430a      	orrs	r2, r1
 80012fa:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80012fc:	695a      	ldr	r2, [r3, #20]
  if(huart->Instance == USART1)
 80012fe:	4283      	cmp	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001300:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001304:	ea42 0205 	orr.w	r2, r2, r5
 8001308:	615a      	str	r2, [r3, #20]
  if(huart->Instance == USART1)
 800130a:	d036      	beq.n	800137a <HAL_UART_Init+0xca>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800130c:	f7ff ffb0 	bl	8001270 <HAL_RCC_GetPCLK1Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001310:	6862      	ldr	r2, [r4, #4]
 8001312:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8001316:	0092      	lsls	r2, r2, #2
 8001318:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800131c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001320:	f04f 0e64 	mov.w	lr, #100	; 0x64
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001324:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8001326:	f04f 0c20 	mov.w	ip, #32
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800132a:	4817      	ldr	r0, [pc, #92]	; (8001388 <HAL_UART_Init+0xd8>)
 800132c:	6821      	ldr	r1, [r4, #0]
 800132e:	fba0 6203 	umull	r6, r2, r0, r3
 8001332:	0952      	lsrs	r2, r2, #5
 8001334:	fb0e 3312 	mls	r3, lr, r2, r3
 8001338:	011b      	lsls	r3, r3, #4
 800133a:	3332      	adds	r3, #50	; 0x32
 800133c:	fba0 0303 	umull	r0, r3, r0, r3
 8001340:	0112      	lsls	r2, r2, #4
 8001342:	eb02 1253 	add.w	r2, r2, r3, lsr #5
 8001346:	608a      	str	r2, [r1, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001348:	690b      	ldr	r3, [r1, #16]
  return HAL_OK;
 800134a:	4628      	mov	r0, r5
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800134c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001350:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001352:	694b      	ldr	r3, [r1, #20]
 8001354:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001358:	614b      	str	r3, [r1, #20]
  __HAL_UART_ENABLE(huart);
 800135a:	68cb      	ldr	r3, [r1, #12]
 800135c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001360:	60cb      	str	r3, [r1, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001362:	6465      	str	r5, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001364:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001368:	f884 c042 	strb.w	ip, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800136c:	6365      	str	r5, [r4, #52]	; 0x34
}
 800136e:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 8001370:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 8001374:	f7ff f9a8 	bl	80006c8 <HAL_UART_MspInit>
 8001378:	e7a4      	b.n	80012c4 <HAL_UART_Init+0x14>
    pclk = HAL_RCC_GetPCLK2Freq();
 800137a:	f7ff ff89 	bl	8001290 <HAL_RCC_GetPCLK2Freq>
 800137e:	e7c7      	b.n	8001310 <HAL_UART_Init+0x60>
    return HAL_ERROR;
 8001380:	2001      	movs	r0, #1
}
 8001382:	4770      	bx	lr
 8001384:	40013800 	.word	0x40013800
 8001388:	51eb851f 	.word	0x51eb851f

0800138c <HAL_UART_Transmit>:
{
 800138c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001390:	461d      	mov	r5, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001392:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001396:	2b20      	cmp	r3, #32
 8001398:	d14a      	bne.n	8001430 <HAL_UART_Transmit+0xa4>
    if ((pData == NULL) || (Size == 0U))
 800139a:	4688      	mov	r8, r1
 800139c:	b109      	cbz	r1, 80013a2 <HAL_UART_Transmit+0x16>
 800139e:	4617      	mov	r7, r2
 80013a0:	b912      	cbnz	r2, 80013a8 <HAL_UART_Transmit+0x1c>
      return  HAL_ERROR;
 80013a2:	2001      	movs	r0, #1
}
 80013a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80013a8:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013aa:	f04f 0900 	mov.w	r9, #0
 80013ae:	4604      	mov	r4, r0
 80013b0:	f8c0 9044 	str.w	r9, [r0, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80013b4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    tickstart = HAL_GetTick();
 80013b8:	f7ff fa86 	bl	80008c8 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80013bc:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80013be:	4606      	mov	r6, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80013c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 80013c4:	84a7      	strh	r7, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80013c6:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80013c8:	d035      	beq.n	8001436 <HAL_UART_Transmit+0xaa>
    while (huart->TxXferCount > 0U)
 80013ca:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d04a      	beq.n	8001468 <HAL_UART_Transmit+0xdc>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80013d2:	6823      	ldr	r3, [r4, #0]
 80013d4:	1c6a      	adds	r2, r5, #1
 80013d6:	d11a      	bne.n	800140e <HAL_UART_Transmit+0x82>
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	0617      	lsls	r7, r2, #24
 80013dc:	d5fc      	bpl.n	80013d8 <HAL_UART_Transmit+0x4c>
      if (pdata8bits == NULL)
 80013de:	f1b8 0f00 	cmp.w	r8, #0
 80013e2:	d020      	beq.n	8001426 <HAL_UART_Transmit+0x9a>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80013e4:	f818 2b01 	ldrb.w	r2, [r8], #1
 80013e8:	605a      	str	r2, [r3, #4]
      huart->TxXferCount--;
 80013ea:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80013ec:	3a01      	subs	r2, #1
 80013ee:	b292      	uxth	r2, r2
 80013f0:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80013f2:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80013f4:	b292      	uxth	r2, r2
 80013f6:	2a00      	cmp	r2, #0
 80013f8:	d1ec      	bne.n	80013d4 <HAL_UART_Transmit+0x48>
 80013fa:	1c69      	adds	r1, r5, #1
 80013fc:	d127      	bne.n	800144e <HAL_UART_Transmit+0xc2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	0652      	lsls	r2, r2, #25
 8001402:	d5fc      	bpl.n	80013fe <HAL_UART_Transmit+0x72>
    huart->gState = HAL_UART_STATE_READY;
 8001404:	2320      	movs	r3, #32
    return HAL_OK;
 8001406:	2000      	movs	r0, #0
    huart->gState = HAL_UART_STATE_READY;
 8001408:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    return HAL_OK;
 800140c:	e7ca      	b.n	80013a4 <HAL_UART_Transmit+0x18>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	0610      	lsls	r0, r2, #24
 8001412:	d4e4      	bmi.n	80013de <HAL_UART_Transmit+0x52>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001414:	f7ff fa58 	bl	80008c8 <HAL_GetTick>
 8001418:	1b80      	subs	r0, r0, r6
 800141a:	4285      	cmp	r5, r0
 800141c:	d311      	bcc.n	8001442 <HAL_UART_Transmit+0xb6>
 800141e:	b185      	cbz	r5, 8001442 <HAL_UART_Transmit+0xb6>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001420:	6823      	ldr	r3, [r4, #0]
 8001422:	68da      	ldr	r2, [r3, #12]
 8001424:	e7d6      	b.n	80013d4 <HAL_UART_Transmit+0x48>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001426:	f839 2b02 	ldrh.w	r2, [r9], #2
 800142a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800142e:	e7db      	b.n	80013e8 <HAL_UART_Transmit+0x5c>
    return HAL_BUSY;
 8001430:	2002      	movs	r0, #2
}
 8001432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001436:	6923      	ldr	r3, [r4, #16]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1c6      	bne.n	80013ca <HAL_UART_Transmit+0x3e>
 800143c:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 800143e:	4698      	mov	r8, r3
 8001440:	e7c3      	b.n	80013ca <HAL_UART_Transmit+0x3e>
      huart->gState = HAL_UART_STATE_READY;
 8001442:	2320      	movs	r3, #32
 8001444:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      return HAL_TIMEOUT;
 8001448:	2003      	movs	r0, #3
}
 800144a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	065b      	lsls	r3, r3, #25
 8001452:	d4d7      	bmi.n	8001404 <HAL_UART_Transmit+0x78>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001454:	f7ff fa38 	bl	80008c8 <HAL_GetTick>
 8001458:	1b83      	subs	r3, r0, r6
 800145a:	429d      	cmp	r5, r3
 800145c:	d3f1      	bcc.n	8001442 <HAL_UART_Transmit+0xb6>
 800145e:	2d00      	cmp	r5, #0
 8001460:	d0ef      	beq.n	8001442 <HAL_UART_Transmit+0xb6>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001462:	6823      	ldr	r3, [r4, #0]
 8001464:	68da      	ldr	r2, [r3, #12]
 8001466:	e7c8      	b.n	80013fa <HAL_UART_Transmit+0x6e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001468:	6823      	ldr	r3, [r4, #0]
 800146a:	e7c6      	b.n	80013fa <HAL_UART_Transmit+0x6e>

0800146c <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800146c:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8001470:	2b20      	cmp	r3, #32
 8001472:	d11e      	bne.n	80014b2 <HAL_UART_Receive_IT+0x46>
    if ((pData == NULL) || (Size == 0U))
 8001474:	b101      	cbz	r1, 8001478 <HAL_UART_Receive_IT+0xc>
 8001476:	b90a      	cbnz	r2, 800147c <HAL_UART_Receive_IT+0x10>
      return HAL_ERROR;
 8001478:	2001      	movs	r0, #1
}
 800147a:	4770      	bx	lr
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800147c:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800147e:	f04f 0c22 	mov.w	ip, #34	; 0x22
  huart->pRxBuffPtr = pData;
 8001482:	6281      	str	r1, [r0, #40]	; 0x28
  if (huart->Init.Parity != UART_PARITY_NONE)
 8001484:	6901      	ldr	r1, [r0, #16]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001486:	6303      	str	r3, [r0, #48]	; 0x30
  huart->RxXferSize = Size;
 8001488:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->RxXferCount = Size;
 800148a:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800148c:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800148e:	6803      	ldr	r3, [r0, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001490:	f880 c042 	strb.w	ip, [r0, #66]	; 0x42
  if (huart->Init.Parity != UART_PARITY_NONE)
 8001494:	b119      	cbz	r1, 800149e <HAL_UART_Receive_IT+0x32>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001496:	68da      	ldr	r2, [r3, #12]
 8001498:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800149c:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800149e:	695a      	ldr	r2, [r3, #20]
    return (UART_Start_Receive_IT(huart, pData, Size));
 80014a0:	2000      	movs	r0, #0
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80014a2:	f042 0201 	orr.w	r2, r2, #1
 80014a6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80014a8:	68da      	ldr	r2, [r3, #12]
 80014aa:	f042 0220 	orr.w	r2, r2, #32
 80014ae:	60da      	str	r2, [r3, #12]
    return (UART_Start_Receive_IT(huart, pData, Size));
 80014b0:	4770      	bx	lr
    return HAL_BUSY;
 80014b2:	2002      	movs	r0, #2
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop

080014b8 <HAL_UART_TxCpltCallback>:
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop

080014bc <HAL_UART_ErrorCallback>:
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop

080014c0 <UART_DMAAbortOnError>:
{
 80014c0:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 80014c2:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80014c4:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 80014c6:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80014c8:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80014ca:	f7ff fff7 	bl	80014bc <HAL_UART_ErrorCallback>
}
 80014ce:	bd08      	pop	{r3, pc}

080014d0 <HAL_UARTEx_RxEventCallback>:
}
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop

080014d4 <UART_Receive_IT.part.0.isra.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80014d4:	6883      	ldr	r3, [r0, #8]
 80014d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014da:	d045      	beq.n	8001568 <UART_Receive_IT.part.0.isra.0+0x94>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80014dc:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d03a      	beq.n	8001558 <UART_Receive_IT.part.0.isra.0+0x84>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80014e2:	6803      	ldr	r3, [r0, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014ea:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 80014ec:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80014ee:	3201      	adds	r2, #1
    if (--huart->RxXferCount == 0U)
 80014f0:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
      huart->pRxBuffPtr += 2U;
 80014f2:	6282      	str	r2, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 80014f4:	3b01      	subs	r3, #1
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d133      	bne.n	8001566 <UART_Receive_IT.part.0.isra.0+0x92>
      huart->RxState = HAL_UART_STATE_READY;
 80014fe:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001502:	6802      	ldr	r2, [r0, #0]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8001504:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001506:	68d1      	ldr	r1, [r2, #12]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8001508:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800150a:	f021 0120 	bic.w	r1, r1, #32
 800150e:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001510:	68d1      	ldr	r1, [r2, #12]
 8001512:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8001516:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001518:	6951      	ldr	r1, [r2, #20]
 800151a:	f021 0101 	bic.w	r1, r1, #1
 800151e:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001520:	f880 c042 	strb.w	ip, [r0, #66]	; 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001524:	6343      	str	r3, [r0, #52]	; 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001526:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8001528:	2901      	cmp	r1, #1
 800152a:	d127      	bne.n	800157c <UART_Receive_IT.part.0.isra.0+0xa8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800152c:	6303      	str	r3, [r0, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800152e:	f102 030c 	add.w	r3, r2, #12
 8001532:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001536:	f023 0310 	bic.w	r3, r3, #16
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800153a:	f102 0c0c 	add.w	ip, r2, #12
 800153e:	e84c 3100 	strex	r1, r3, [ip]
 8001542:	2900      	cmp	r1, #0
 8001544:	d1f3      	bne.n	800152e <UART_Receive_IT.part.0.isra.0+0x5a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8001546:	6813      	ldr	r3, [r2, #0]
 8001548:	06db      	lsls	r3, r3, #27
 800154a:	d421      	bmi.n	8001590 <UART_Receive_IT.part.0.isra.0+0xbc>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800154c:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800154e:	f7ff ffbf 	bl	80014d0 <HAL_UARTEx_RxEventCallback>
}
 8001552:	b003      	add	sp, #12
 8001554:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001558:	6903      	ldr	r3, [r0, #16]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1c1      	bne.n	80014e2 <UART_Receive_IT.part.0.isra.0+0xe>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800155e:	6803      	ldr	r3, [r0, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	7013      	strb	r3, [r2, #0]
 8001564:	e7c2      	b.n	80014ec <UART_Receive_IT.part.0.isra.0+0x18>
 8001566:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001568:	6903      	ldr	r3, [r0, #16]
 800156a:	b963      	cbnz	r3, 8001586 <UART_Receive_IT.part.0.isra.0+0xb2>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800156c:	6803      	ldr	r3, [r0, #0]
 800156e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001576:	f822 3b02 	strh.w	r3, [r2], #2
      huart->pRxBuffPtr += 2U;
 800157a:	e7b9      	b.n	80014f0 <UART_Receive_IT.part.0.isra.0+0x1c>
        HAL_UART_RxCpltCallback(huart);
 800157c:	f7fe fe3e 	bl	80001fc <HAL_UART_RxCpltCallback>
}
 8001580:	b003      	add	sp, #12
 8001582:	f85d fb04 	ldr.w	pc, [sp], #4
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001586:	6803      	ldr	r3, [r0, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001588:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	7013      	strb	r3, [r2, #0]
 800158e:	e7ad      	b.n	80014ec <UART_Receive_IT.part.0.isra.0+0x18>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001590:	2300      	movs	r3, #0
 8001592:	9301      	str	r3, [sp, #4]
 8001594:	6813      	ldr	r3, [r2, #0]
 8001596:	9301      	str	r3, [sp, #4]
 8001598:	6853      	ldr	r3, [r2, #4]
 800159a:	9301      	str	r3, [sp, #4]
 800159c:	9b01      	ldr	r3, [sp, #4]
 800159e:	e7d5      	b.n	800154c <UART_Receive_IT.part.0.isra.0+0x78>

080015a0 <HAL_UART_IRQHandler>:
{
 80015a0:	b530      	push	{r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80015a2:	6803      	ldr	r3, [r0, #0]
{
 80015a4:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80015a6:	681a      	ldr	r2, [r3, #0]
{
 80015a8:	b083      	sub	sp, #12
  if (errorflags == RESET)
 80015aa:	f012 0f0f 	tst.w	r2, #15
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80015ae:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80015b0:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 80015b2:	d16f      	bne.n	8001694 <HAL_UART_IRQHandler+0xf4>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80015b4:	0695      	lsls	r5, r2, #26
 80015b6:	d502      	bpl.n	80015be <HAL_UART_IRQHandler+0x1e>
 80015b8:	068d      	lsls	r5, r1, #26
 80015ba:	f100 80b3 	bmi.w	8001724 <HAL_UART_IRQHandler+0x184>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80015be:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80015c0:	2801      	cmp	r0, #1
 80015c2:	d00b      	beq.n	80015dc <HAL_UART_IRQHandler+0x3c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80015c4:	0610      	lsls	r0, r2, #24
 80015c6:	d502      	bpl.n	80015ce <HAL_UART_IRQHandler+0x2e>
 80015c8:	060d      	lsls	r5, r1, #24
 80015ca:	f100 80b5 	bmi.w	8001738 <HAL_UART_IRQHandler+0x198>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80015ce:	0650      	lsls	r0, r2, #25
 80015d0:	d502      	bpl.n	80015d8 <HAL_UART_IRQHandler+0x38>
 80015d2:	064a      	lsls	r2, r1, #25
 80015d4:	f100 80cf 	bmi.w	8001776 <HAL_UART_IRQHandler+0x1d6>
}
 80015d8:	b003      	add	sp, #12
 80015da:	bd30      	pop	{r4, r5, pc}
      && ((isrflags & USART_SR_IDLE) != 0U)
 80015dc:	06d5      	lsls	r5, r2, #27
 80015de:	d5f1      	bpl.n	80015c4 <HAL_UART_IRQHandler+0x24>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80015e0:	06c8      	lsls	r0, r1, #27
 80015e2:	d5ef      	bpl.n	80015c4 <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80015e4:	2200      	movs	r2, #0
 80015e6:	9201      	str	r2, [sp, #4]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	9201      	str	r2, [sp, #4]
 80015ec:	685a      	ldr	r2, [r3, #4]
 80015ee:	9201      	str	r2, [sp, #4]
 80015f0:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80015f2:	695a      	ldr	r2, [r3, #20]
 80015f4:	0655      	lsls	r5, r2, #25
 80015f6:	f140 8118 	bpl.w	800182a <HAL_UART_IRQHandler+0x28a>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80015fa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80015fc:	6802      	ldr	r2, [r0, #0]
 80015fe:	6852      	ldr	r2, [r2, #4]
 8001600:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8001602:	2a00      	cmp	r2, #0
 8001604:	d0e8      	beq.n	80015d8 <HAL_UART_IRQHandler+0x38>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001606:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8001608:	4291      	cmp	r1, r2
 800160a:	d9e5      	bls.n	80015d8 <HAL_UART_IRQHandler+0x38>
        huart->RxXferCount = nb_remaining_rx_data;
 800160c:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800160e:	6982      	ldr	r2, [r0, #24]
 8001610:	2a20      	cmp	r2, #32
 8001612:	d036      	beq.n	8001682 <HAL_UART_IRQHandler+0xe2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001614:	f103 020c 	add.w	r2, r3, #12
 8001618:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800161c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001620:	f103 050c 	add.w	r5, r3, #12
 8001624:	e845 2100 	strex	r1, r2, [r5]
 8001628:	2900      	cmp	r1, #0
 800162a:	d1f3      	bne.n	8001614 <HAL_UART_IRQHandler+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800162c:	f103 0214 	add.w	r2, r3, #20
 8001630:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001634:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001638:	f103 0514 	add.w	r5, r3, #20
 800163c:	e845 2100 	strex	r1, r2, [r5]
 8001640:	2900      	cmp	r1, #0
 8001642:	d1f3      	bne.n	800162c <HAL_UART_IRQHandler+0x8c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001644:	f103 0214 	add.w	r2, r3, #20
 8001648:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800164c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001650:	f103 0514 	add.w	r5, r3, #20
 8001654:	e845 2100 	strex	r1, r2, [r5]
 8001658:	2900      	cmp	r1, #0
 800165a:	d1f3      	bne.n	8001644 <HAL_UART_IRQHandler+0xa4>
          huart->RxState = HAL_UART_STATE_READY;
 800165c:	2220      	movs	r2, #32
 800165e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001662:	6321      	str	r1, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001664:	f103 020c 	add.w	r2, r3, #12
 8001668:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800166c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001670:	f103 050c 	add.w	r5, r3, #12
 8001674:	e845 2100 	strex	r1, r2, [r5]
 8001678:	2900      	cmp	r1, #0
 800167a:	d1f3      	bne.n	8001664 <HAL_UART_IRQHandler+0xc4>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800167c:	f7ff f9b2 	bl	80009e4 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001680:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001682:	2302      	movs	r3, #2
 8001684:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001686:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8001688:	4620      	mov	r0, r4
 800168a:	1ac9      	subs	r1, r1, r3
 800168c:	b289      	uxth	r1, r1
 800168e:	f7ff ff1f 	bl	80014d0 <HAL_UARTEx_RxEventCallback>
 8001692:	e7a1      	b.n	80015d8 <HAL_UART_IRQHandler+0x38>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001694:	f005 0501 	and.w	r5, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001698:	f401 7090 	and.w	r0, r1, #288	; 0x120
 800169c:	4328      	orrs	r0, r5
 800169e:	d08e      	beq.n	80015be <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80016a0:	07d0      	lsls	r0, r2, #31
 80016a2:	d505      	bpl.n	80016b0 <HAL_UART_IRQHandler+0x110>
 80016a4:	05c8      	lsls	r0, r1, #23
 80016a6:	d503      	bpl.n	80016b0 <HAL_UART_IRQHandler+0x110>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80016a8:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80016aa:	f040 0001 	orr.w	r0, r0, #1
 80016ae:	6460      	str	r0, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80016b0:	0750      	lsls	r0, r2, #29
 80016b2:	d532      	bpl.n	800171a <HAL_UART_IRQHandler+0x17a>
 80016b4:	b14d      	cbz	r5, 80016ca <HAL_UART_IRQHandler+0x12a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80016b6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80016b8:	f040 0002 	orr.w	r0, r0, #2
 80016bc:	6460      	str	r0, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80016be:	0790      	lsls	r0, r2, #30
 80016c0:	d503      	bpl.n	80016ca <HAL_UART_IRQHandler+0x12a>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80016c2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80016c4:	f040 0004 	orr.w	r0, r0, #4
 80016c8:	6460      	str	r0, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80016ca:	0710      	lsls	r0, r2, #28
 80016cc:	d507      	bpl.n	80016de <HAL_UART_IRQHandler+0x13e>
 80016ce:	f001 0020 	and.w	r0, r1, #32
 80016d2:	4328      	orrs	r0, r5
 80016d4:	d003      	beq.n	80016de <HAL_UART_IRQHandler+0x13e>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80016d6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80016d8:	f040 0008 	orr.w	r0, r0, #8
 80016dc:	6460      	str	r0, [r4, #68]	; 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80016de:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80016e0:	2800      	cmp	r0, #0
 80016e2:	f43f af79 	beq.w	80015d8 <HAL_UART_IRQHandler+0x38>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80016e6:	0690      	lsls	r0, r2, #26
 80016e8:	d509      	bpl.n	80016fe <HAL_UART_IRQHandler+0x15e>
 80016ea:	0689      	lsls	r1, r1, #26
 80016ec:	d507      	bpl.n	80016fe <HAL_UART_IRQHandler+0x15e>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80016ee:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 80016f2:	2a22      	cmp	r2, #34	; 0x22
 80016f4:	d103      	bne.n	80016fe <HAL_UART_IRQHandler+0x15e>
 80016f6:	4620      	mov	r0, r4
 80016f8:	f7ff feec 	bl	80014d4 <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80016fc:	6823      	ldr	r3, [r4, #0]
 80016fe:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001700:	6c61      	ldr	r1, [r4, #68]	; 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001702:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001706:	f001 0108 	and.w	r1, r1, #8
 800170a:	ea52 0501 	orrs.w	r5, r2, r1
 800170e:	d13d      	bne.n	800178c <HAL_UART_IRQHandler+0x1ec>
        HAL_UART_ErrorCallback(huart);
 8001710:	4620      	mov	r0, r4
 8001712:	f7ff fed3 	bl	80014bc <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001716:	6465      	str	r5, [r4, #68]	; 0x44
 8001718:	e75e      	b.n	80015d8 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800171a:	0790      	lsls	r0, r2, #30
 800171c:	d5d5      	bpl.n	80016ca <HAL_UART_IRQHandler+0x12a>
 800171e:	2d00      	cmp	r5, #0
 8001720:	d1cf      	bne.n	80016c2 <HAL_UART_IRQHandler+0x122>
 8001722:	e7d2      	b.n	80016ca <HAL_UART_IRQHandler+0x12a>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001724:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8001728:	2b22      	cmp	r3, #34	; 0x22
 800172a:	f47f af55 	bne.w	80015d8 <HAL_UART_IRQHandler+0x38>
}
 800172e:	b003      	add	sp, #12
 8001730:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001734:	f7ff bece 	b.w	80014d4 <UART_Receive_IT.part.0.isra.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001738:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800173c:	2a21      	cmp	r2, #33	; 0x21
 800173e:	f47f af4b 	bne.w	80015d8 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001742:	68a2      	ldr	r2, [r4, #8]
 8001744:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001748:	f000 80aa 	beq.w	80018a0 <HAL_UART_IRQHandler+0x300>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800174c:	6a22      	ldr	r2, [r4, #32]
 800174e:	1c51      	adds	r1, r2, #1
 8001750:	6221      	str	r1, [r4, #32]
 8001752:	7812      	ldrb	r2, [r2, #0]
 8001754:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8001756:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001758:	3a01      	subs	r2, #1
 800175a:	b292      	uxth	r2, r2
 800175c:	84e2      	strh	r2, [r4, #38]	; 0x26
 800175e:	2a00      	cmp	r2, #0
 8001760:	f47f af3a 	bne.w	80015d8 <HAL_UART_IRQHandler+0x38>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001764:	68da      	ldr	r2, [r3, #12]
 8001766:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800176a:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800176c:	68da      	ldr	r2, [r3, #12]
 800176e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001772:	60da      	str	r2, [r3, #12]
 8001774:	e730      	b.n	80015d8 <HAL_UART_IRQHandler+0x38>
  huart->gState = HAL_UART_STATE_READY;
 8001776:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001778:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 800177a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800177c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001780:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001782:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  HAL_UART_TxCpltCallback(huart);
 8001786:	f7ff fe97 	bl	80014b8 <HAL_UART_TxCpltCallback>
    return;
 800178a:	e725      	b.n	80015d8 <HAL_UART_IRQHandler+0x38>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800178c:	f103 020c 	add.w	r2, r3, #12
 8001790:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001794:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001798:	f103 000c 	add.w	r0, r3, #12
 800179c:	e840 2100 	strex	r1, r2, [r0]
 80017a0:	2900      	cmp	r1, #0
 80017a2:	d1f3      	bne.n	800178c <HAL_UART_IRQHandler+0x1ec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017a4:	f103 0214 	add.w	r2, r3, #20
 80017a8:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80017ac:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017b0:	f103 0014 	add.w	r0, r3, #20
 80017b4:	e840 2100 	strex	r1, r2, [r0]
 80017b8:	2900      	cmp	r1, #0
 80017ba:	d1f3      	bne.n	80017a4 <HAL_UART_IRQHandler+0x204>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80017bc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80017be:	2a01      	cmp	r2, #1
 80017c0:	d022      	beq.n	8001808 <HAL_UART_IRQHandler+0x268>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80017c2:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80017c4:	2120      	movs	r1, #32
 80017c6:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80017ca:	6322      	str	r2, [r4, #48]	; 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80017cc:	695a      	ldr	r2, [r3, #20]
 80017ce:	0652      	lsls	r2, r2, #25
 80017d0:	d527      	bpl.n	8001822 <HAL_UART_IRQHandler+0x282>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017d2:	f103 0214 	add.w	r2, r3, #20
 80017d6:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80017da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017de:	f103 0014 	add.w	r0, r3, #20
 80017e2:	e840 2100 	strex	r1, r2, [r0]
 80017e6:	2900      	cmp	r1, #0
 80017e8:	d1f3      	bne.n	80017d2 <HAL_UART_IRQHandler+0x232>
          if (huart->hdmarx != NULL)
 80017ea:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80017ec:	b1c8      	cbz	r0, 8001822 <HAL_UART_IRQHandler+0x282>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80017ee:	4b32      	ldr	r3, [pc, #200]	; (80018b8 <HAL_UART_IRQHandler+0x318>)
 80017f0:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80017f2:	f7ff f91b 	bl	8000a2c <HAL_DMA_Abort_IT>
 80017f6:	2800      	cmp	r0, #0
 80017f8:	f43f aeee 	beq.w	80015d8 <HAL_UART_IRQHandler+0x38>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80017fc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80017fe:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 8001800:	b003      	add	sp, #12
 8001802:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001806:	4718      	bx	r3
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001808:	f103 020c 	add.w	r2, r3, #12
 800180c:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001810:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001814:	f103 000c 	add.w	r0, r3, #12
 8001818:	e840 2100 	strex	r1, r2, [r0]
 800181c:	2900      	cmp	r1, #0
 800181e:	d1f3      	bne.n	8001808 <HAL_UART_IRQHandler+0x268>
 8001820:	e7cf      	b.n	80017c2 <HAL_UART_IRQHandler+0x222>
            HAL_UART_ErrorCallback(huart);
 8001822:	4620      	mov	r0, r4
 8001824:	f7ff fe4a 	bl	80014bc <HAL_UART_ErrorCallback>
 8001828:	e6d6      	b.n	80015d8 <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800182a:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
      if ((huart->RxXferCount > 0U)
 800182c:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800182e:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
      if ((huart->RxXferCount > 0U)
 8001830:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001832:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8001834:	2a00      	cmp	r2, #0
 8001836:	f43f aecf 	beq.w	80015d8 <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800183a:	1a41      	subs	r1, r0, r1
 800183c:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800183e:	2900      	cmp	r1, #0
 8001840:	f43f aeca 	beq.w	80015d8 <HAL_UART_IRQHandler+0x38>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001844:	f103 020c 	add.w	r2, r3, #12
 8001848:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800184c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001850:	f103 050c 	add.w	r5, r3, #12
 8001854:	e845 2000 	strex	r0, r2, [r5]
 8001858:	2800      	cmp	r0, #0
 800185a:	d1f3      	bne.n	8001844 <HAL_UART_IRQHandler+0x2a4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800185c:	f103 0214 	add.w	r2, r3, #20
 8001860:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001864:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001868:	f103 0514 	add.w	r5, r3, #20
 800186c:	e845 2000 	strex	r0, r2, [r5]
 8001870:	2800      	cmp	r0, #0
 8001872:	d1f3      	bne.n	800185c <HAL_UART_IRQHandler+0x2bc>
        huart->RxState = HAL_UART_STATE_READY;
 8001874:	2220      	movs	r2, #32
 8001876:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800187a:	6320      	str	r0, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800187c:	f103 020c 	add.w	r2, r3, #12
 8001880:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001884:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001888:	f103 050c 	add.w	r5, r3, #12
 800188c:	e845 2000 	strex	r0, r2, [r5]
 8001890:	2800      	cmp	r0, #0
 8001892:	d1f3      	bne.n	800187c <HAL_UART_IRQHandler+0x2dc>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001894:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001896:	4620      	mov	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001898:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800189a:	f7ff fe19 	bl	80014d0 <HAL_UARTEx_RxEventCallback>
 800189e:	e69b      	b.n	80015d8 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80018a0:	6922      	ldr	r2, [r4, #16]
 80018a2:	2a00      	cmp	r2, #0
 80018a4:	f47f af52 	bne.w	800174c <HAL_UART_IRQHandler+0x1ac>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80018a8:	6a22      	ldr	r2, [r4, #32]
 80018aa:	f832 1b02 	ldrh.w	r1, [r2], #2
 80018ae:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80018b2:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80018b4:	6222      	str	r2, [r4, #32]
 80018b6:	e74e      	b.n	8001756 <HAL_UART_IRQHandler+0x1b6>
 80018b8:	080014c1 	.word	0x080014c1

080018bc <memset>:
 80018bc:	4603      	mov	r3, r0
 80018be:	4402      	add	r2, r0
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d100      	bne.n	80018c6 <memset+0xa>
 80018c4:	4770      	bx	lr
 80018c6:	f803 1b01 	strb.w	r1, [r3], #1
 80018ca:	e7f9      	b.n	80018c0 <memset+0x4>

080018cc <__libc_init_array>:
 80018cc:	b570      	push	{r4, r5, r6, lr}
 80018ce:	2600      	movs	r6, #0
 80018d0:	4d0c      	ldr	r5, [pc, #48]	; (8001904 <__libc_init_array+0x38>)
 80018d2:	4c0d      	ldr	r4, [pc, #52]	; (8001908 <__libc_init_array+0x3c>)
 80018d4:	1b64      	subs	r4, r4, r5
 80018d6:	10a4      	asrs	r4, r4, #2
 80018d8:	42a6      	cmp	r6, r4
 80018da:	d109      	bne.n	80018f0 <__libc_init_array+0x24>
 80018dc:	f000 f81a 	bl	8001914 <_init>
 80018e0:	2600      	movs	r6, #0
 80018e2:	4d0a      	ldr	r5, [pc, #40]	; (800190c <__libc_init_array+0x40>)
 80018e4:	4c0a      	ldr	r4, [pc, #40]	; (8001910 <__libc_init_array+0x44>)
 80018e6:	1b64      	subs	r4, r4, r5
 80018e8:	10a4      	asrs	r4, r4, #2
 80018ea:	42a6      	cmp	r6, r4
 80018ec:	d105      	bne.n	80018fa <__libc_init_array+0x2e>
 80018ee:	bd70      	pop	{r4, r5, r6, pc}
 80018f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80018f4:	4798      	blx	r3
 80018f6:	3601      	adds	r6, #1
 80018f8:	e7ee      	b.n	80018d8 <__libc_init_array+0xc>
 80018fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80018fe:	4798      	blx	r3
 8001900:	3601      	adds	r6, #1
 8001902:	e7f2      	b.n	80018ea <__libc_init_array+0x1e>
 8001904:	080019a0 	.word	0x080019a0
 8001908:	080019a0 	.word	0x080019a0
 800190c:	080019a0 	.word	0x080019a0
 8001910:	080019a4 	.word	0x080019a4

08001914 <_init>:
 8001914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001916:	bf00      	nop
 8001918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800191a:	bc08      	pop	{r3}
 800191c:	469e      	mov	lr, r3
 800191e:	4770      	bx	lr

08001920 <_fini>:
 8001920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001922:	bf00      	nop
 8001924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001926:	bc08      	pop	{r3}
 8001928:	469e      	mov	lr, r3
 800192a:	4770      	bx	lr
